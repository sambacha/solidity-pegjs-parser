// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length);
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1)
          + peg$padEnd("", last - s.column, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(string, n) {
       var result = "", i;

       for (i = 0; i < n; i++) {
         result += string;
       }

       return result;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    if (typeof console === "object") {
      console.log(
        event.location.start.line + ":" + event.location.start.column + "-"
          + event.location.end.line + ":" + event.location.end.column + " "
          + pad(event.type, 10) + " "
          + repeat("  ", that.indentLevel) + event.rule
      );
    }
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

    default:
      throw new Error("Invalid event type: " + event.type + ".");
  }
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = "\t";
  var peg$c1 = "\v";
  var peg$c2 = "\f";
  var peg$c3 = " ";
  var peg$c4 = "\xA0";
  var peg$c5 = "\uFEFF";
  var peg$c6 = "\n";
  var peg$c7 = "\r\n";
  var peg$c8 = "\r";
  var peg$c9 = "\u2028";
  var peg$c10 = "\u2029";
  var peg$c11 = "/*";
  var peg$c12 = "*/";
  var peg$c13 = "//";
  var peg$c14 = "$";
  var peg$c15 = "_";
  var peg$c16 = "address";
  var peg$c17 = ".";
  var peg$c18 = "0";
  var peg$c19 = "e";
  var peg$c20 = "0x";
  var peg$c21 = "\"";
  var peg$c22 = "'";
  var peg$c23 = "\\";
  var peg$c24 = "b";
  var peg$c25 = "f";
  var peg$c26 = "n";
  var peg$c27 = "r";
  var peg$c28 = "t";
  var peg$c29 = "v";
  var peg$c30 = "x";
  var peg$c31 = "u";
  var peg$c32 = "emit";
  var peg$c33 = "revert";
  var peg$c34 = "abstract";
  var peg$c35 = "experimental";
  var peg$c36 = "override";
  var peg$c37 = "abicoder";
  var peg$c38 = "external";
  var peg$c39 = "pure";
  var peg$c40 = "view";
  var peg$c41 = "payable";
  var peg$c42 = "anonymous";
  var peg$c43 = "as";
  var peg$c44 = "break";
  var peg$c45 = "calldata";
  var peg$c46 = "constant";
  var peg$c47 = "immutable";
  var peg$c48 = "continue";
  var peg$c49 = "contract";
  var peg$c50 = "constructor";
  var peg$c51 = "receive";
  var peg$c52 = "fallback";
  var peg$c53 = "days";
  var peg$c54 = "delete";
  var peg$c55 = "do";
  var peg$c56 = "else";
  var peg$c57 = "enum";
  var peg$c58 = "ether";
  var peg$c59 = "event";
  var peg$c60 = "error";
  var peg$c61 = "false";
  var peg$c62 = "finney";
  var peg$c63 = "for";
  var peg$c64 = "from";
  var peg$c65 = "function";
  var peg$c66 = "get";
  var peg$c67 = "hex";
  var peg$c68 = "hours";
  var peg$c69 = "if";
  var peg$c70 = "try";
  var peg$c71 = "catch";
  var peg$c72 = "is";
  var peg$c73 = "indexed";
  var peg$c74 = "import";
  var peg$c75 = "interface";
  var peg$c76 = "internal";
  var peg$c77 = "library";
  var peg$c78 = "mapping";
  var peg$c79 = "memory";
  var peg$c80 = "minutes";
  var peg$c81 = "modifier";
  var peg$c82 = "new";
  var peg$c83 = "null";
  var peg$c84 = "private";
  var peg$c85 = "pragma";
  var peg$c86 = "public";
  var peg$c87 = "return";
  var peg$c88 = "returns";
  var peg$c89 = "seconds";
  var peg$c90 = "set";
  var peg$c91 = "solidity";
  var peg$c92 = "storage";
  var peg$c93 = "struct";
  var peg$c94 = "super";
  var peg$c95 = "szabo";
  var peg$c96 = "this";
  var peg$c97 = "throw";
  var peg$c98 = "true";
  var peg$c99 = "using";
  var peg$c100 = "var";
  var peg$c101 = "weeks";
  var peg$c102 = "wei";
  var peg$c103 = "while";
  var peg$c104 = "years";
  var peg$c105 = ";";
  var peg$c106 = ",";
  var peg$c107 = "(";
  var peg$c108 = ")";
  var peg$c109 = "[";
  var peg$c110 = "]";
  var peg$c111 = "{";
  var peg$c112 = "}";
  var peg$c113 = ":";
  var peg$c114 = "=";
  var peg$c115 = "=>";
  var peg$c116 = "++";
  var peg$c117 = "--";
  var peg$c118 = "+";
  var peg$c119 = "-";
  var peg$c120 = "~";
  var peg$c121 = "!";
  var peg$c122 = "*";
  var peg$c123 = "/";
  var peg$c124 = "%";
  var peg$c125 = "<<";
  var peg$c126 = ">>>";
  var peg$c127 = ">>";
  var peg$c128 = "<=";
  var peg$c129 = ">=";
  var peg$c130 = "<";
  var peg$c131 = ">";
  var peg$c132 = "==";
  var peg$c133 = "!=";
  var peg$c134 = "&";
  var peg$c135 = "^";
  var peg$c136 = "|";
  var peg$c137 = "&&";
  var peg$c138 = "||";
  var peg$c139 = "?";
  var peg$c140 = "*=";
  var peg$c141 = "/=";
  var peg$c142 = "%=";
  var peg$c143 = "+=";
  var peg$c144 = "-=";
  var peg$c145 = "<<=";
  var peg$c146 = ">>=";
  var peg$c147 = "&=";
  var peg$c148 = "^=";
  var peg$c149 = "|=";
  var peg$c150 = "Error";
  var peg$c151 = "assembly";
  var peg$c152 = "->";
  var peg$c153 = "let";
  var peg$c154 = ":=";

  var peg$r0 = /^[\n\r\u2028\u2029]/;
  var peg$r1 = /^[0-9_]/;
  var peg$r2 = /^[1-9]/;
  var peg$r3 = /^[+\-]/;
  var peg$r4 = /^[0-9a-f]/i;
  var peg$r5 = /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/;
  var peg$r6 = /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/;
  var peg$r7 = /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
  var peg$r8 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/;
  var peg$r9 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]/;
  var peg$r10 = /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/;
  var peg$r11 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/;
  var peg$r12 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/;
  var peg$r13 = /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/;
  var peg$r14 = /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/;
  var peg$r15 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  var peg$r16 = /^[+=]/;
  var peg$r17 = /^[\-=]/;
  var peg$r18 = /^[&=]/;
  var peg$r19 = /^[|=]/;

  var peg$e0 = peg$anyExpectation();
  var peg$e1 = peg$otherExpectation("whitespace");
  var peg$e2 = peg$literalExpectation("\t", false);
  var peg$e3 = peg$literalExpectation("\v", false);
  var peg$e4 = peg$literalExpectation("\f", false);
  var peg$e5 = peg$literalExpectation(" ", false);
  var peg$e6 = peg$literalExpectation("\xA0", false);
  var peg$e7 = peg$literalExpectation("\uFEFF", false);
  var peg$e8 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false);
  var peg$e9 = peg$otherExpectation("end of line");
  var peg$e10 = peg$literalExpectation("\n", false);
  var peg$e11 = peg$literalExpectation("\r\n", false);
  var peg$e12 = peg$literalExpectation("\r", false);
  var peg$e13 = peg$literalExpectation("\u2028", false);
  var peg$e14 = peg$literalExpectation("\u2029", false);
  var peg$e15 = peg$otherExpectation("comment");
  var peg$e16 = peg$literalExpectation("/*", false);
  var peg$e17 = peg$literalExpectation("*/", false);
  var peg$e18 = peg$literalExpectation("//", false);
  var peg$e19 = peg$otherExpectation("identifier");
  var peg$e20 = peg$literalExpectation("$", false);
  var peg$e21 = peg$literalExpectation("_", false);
  var peg$e22 = peg$literalExpectation("address", false);
  var peg$e23 = peg$otherExpectation("number");
  var peg$e24 = peg$literalExpectation(".", false);
  var peg$e25 = peg$literalExpectation("0", false);
  var peg$e26 = peg$classExpectation([["0", "9"], "_"], false, false);
  var peg$e27 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e28 = peg$literalExpectation("e", true);
  var peg$e29 = peg$classExpectation(["+", "-"], false, false);
  var peg$e30 = peg$literalExpectation("0x", true);
  var peg$e31 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  var peg$e32 = peg$otherExpectation("string");
  var peg$e33 = peg$literalExpectation("\"", false);
  var peg$e34 = peg$literalExpectation("'", false);
  var peg$e35 = peg$literalExpectation("\\", false);
  var peg$e36 = peg$literalExpectation("b", false);
  var peg$e37 = peg$literalExpectation("f", false);
  var peg$e38 = peg$literalExpectation("n", false);
  var peg$e39 = peg$literalExpectation("r", false);
  var peg$e40 = peg$literalExpectation("t", false);
  var peg$e41 = peg$literalExpectation("v", false);
  var peg$e42 = peg$literalExpectation("x", false);
  var peg$e43 = peg$literalExpectation("u", false);
  var peg$e44 = peg$classExpectation([["a", "z"], "\xB5", ["\xDF", "\xF6"], ["\xF8", "\xFF"], "\u0101", "\u0103", "\u0105", "\u0107", "\u0109", "\u010B", "\u010D", "\u010F", "\u0111", "\u0113", "\u0115", "\u0117", "\u0119", "\u011B", "\u011D", "\u011F", "\u0121", "\u0123", "\u0125", "\u0127", "\u0129", "\u012B", "\u012D", "\u012F", "\u0131", "\u0133", "\u0135", ["\u0137", "\u0138"], "\u013A", "\u013C", "\u013E", "\u0140", "\u0142", "\u0144", "\u0146", ["\u0148", "\u0149"], "\u014B", "\u014D", "\u014F", "\u0151", "\u0153", "\u0155", "\u0157", "\u0159", "\u015B", "\u015D", "\u015F", "\u0161", "\u0163", "\u0165", "\u0167", "\u0169", "\u016B", "\u016D", "\u016F", "\u0171", "\u0173", "\u0175", "\u0177", "\u017A", "\u017C", ["\u017E", "\u0180"], "\u0183", "\u0185", "\u0188", ["\u018C", "\u018D"], "\u0192", "\u0195", ["\u0199", "\u019B"], "\u019E", "\u01A1", "\u01A3", "\u01A5", "\u01A8", ["\u01AA", "\u01AB"], "\u01AD", "\u01B0", "\u01B4", "\u01B6", ["\u01B9", "\u01BA"], ["\u01BD", "\u01BF"], "\u01C6", "\u01C9", "\u01CC", "\u01CE", "\u01D0", "\u01D2", "\u01D4", "\u01D6", "\u01D8", "\u01DA", ["\u01DC", "\u01DD"], "\u01DF", "\u01E1", "\u01E3", "\u01E5", "\u01E7", "\u01E9", "\u01EB", "\u01ED", ["\u01EF", "\u01F0"], "\u01F3", "\u01F5", "\u01F9", "\u01FB", "\u01FD", "\u01FF", "\u0201", "\u0203", "\u0205", "\u0207", "\u0209", "\u020B", "\u020D", "\u020F", "\u0211", "\u0213", "\u0215", "\u0217", "\u0219", "\u021B", "\u021D", "\u021F", "\u0221", "\u0223", "\u0225", "\u0227", "\u0229", "\u022B", "\u022D", "\u022F", "\u0231", ["\u0233", "\u0239"], "\u023C", ["\u023F", "\u0240"], "\u0242", "\u0247", "\u0249", "\u024B", "\u024D", ["\u024F", "\u0293"], ["\u0295", "\u02AF"], "\u0371", "\u0373", "\u0377", ["\u037B", "\u037D"], "\u0390", ["\u03AC", "\u03CE"], ["\u03D0", "\u03D1"], ["\u03D5", "\u03D7"], "\u03D9", "\u03DB", "\u03DD", "\u03DF", "\u03E1", "\u03E3", "\u03E5", "\u03E7", "\u03E9", "\u03EB", "\u03ED", ["\u03EF", "\u03F3"], "\u03F5", "\u03F8", ["\u03FB", "\u03FC"], ["\u0430", "\u045F"], "\u0461", "\u0463", "\u0465", "\u0467", "\u0469", "\u046B", "\u046D", "\u046F", "\u0471", "\u0473", "\u0475", "\u0477", "\u0479", "\u047B", "\u047D", "\u047F", "\u0481", "\u048B", "\u048D", "\u048F", "\u0491", "\u0493", "\u0495", "\u0497", "\u0499", "\u049B", "\u049D", "\u049F", "\u04A1", "\u04A3", "\u04A5", "\u04A7", "\u04A9", "\u04AB", "\u04AD", "\u04AF", "\u04B1", "\u04B3", "\u04B5", "\u04B7", "\u04B9", "\u04BB", "\u04BD", "\u04BF", "\u04C2", "\u04C4", "\u04C6", "\u04C8", "\u04CA", "\u04CC", ["\u04CE", "\u04CF"], "\u04D1", "\u04D3", "\u04D5", "\u04D7", "\u04D9", "\u04DB", "\u04DD", "\u04DF", "\u04E1", "\u04E3", "\u04E5", "\u04E7", "\u04E9", "\u04EB", "\u04ED", "\u04EF", "\u04F1", "\u04F3", "\u04F5", "\u04F7", "\u04F9", "\u04FB", "\u04FD", "\u04FF", "\u0501", "\u0503", "\u0505", "\u0507", "\u0509", "\u050B", "\u050D", "\u050F", "\u0511", "\u0513", "\u0515", "\u0517", "\u0519", "\u051B", "\u051D", "\u051F", "\u0521", "\u0523", "\u0525", "\u0527", "\u0529", "\u052B", "\u052D", "\u052F", ["\u0561", "\u0587"], ["\u13F8", "\u13FD"], ["\u1D00", "\u1D2B"], ["\u1D6B", "\u1D77"], ["\u1D79", "\u1D9A"], "\u1E01", "\u1E03", "\u1E05", "\u1E07", "\u1E09", "\u1E0B", "\u1E0D", "\u1E0F", "\u1E11", "\u1E13", "\u1E15", "\u1E17", "\u1E19", "\u1E1B", "\u1E1D", "\u1E1F", "\u1E21", "\u1E23", "\u1E25", "\u1E27", "\u1E29", "\u1E2B", "\u1E2D", "\u1E2F", "\u1E31", "\u1E33", "\u1E35", "\u1E37", "\u1E39", "\u1E3B", "\u1E3D", "\u1E3F", "\u1E41", "\u1E43", "\u1E45", "\u1E47", "\u1E49", "\u1E4B", "\u1E4D", "\u1E4F", "\u1E51", "\u1E53", "\u1E55", "\u1E57", "\u1E59", "\u1E5B", "\u1E5D", "\u1E5F", "\u1E61", "\u1E63", "\u1E65", "\u1E67", "\u1E69", "\u1E6B", "\u1E6D", "\u1E6F", "\u1E71", "\u1E73", "\u1E75", "\u1E77", "\u1E79", "\u1E7B", "\u1E7D", "\u1E7F", "\u1E81", "\u1E83", "\u1E85", "\u1E87", "\u1E89", "\u1E8B", "\u1E8D", "\u1E8F", "\u1E91", "\u1E93", ["\u1E95", "\u1E9D"], "\u1E9F", "\u1EA1", "\u1EA3", "\u1EA5", "\u1EA7", "\u1EA9", "\u1EAB", "\u1EAD", "\u1EAF", "\u1EB1", "\u1EB3", "\u1EB5", "\u1EB7", "\u1EB9", "\u1EBB", "\u1EBD", "\u1EBF", "\u1EC1", "\u1EC3", "\u1EC5", "\u1EC7", "\u1EC9", "\u1ECB", "\u1ECD", "\u1ECF", "\u1ED1", "\u1ED3", "\u1ED5", "\u1ED7", "\u1ED9", "\u1EDB", "\u1EDD", "\u1EDF", "\u1EE1", "\u1EE3", "\u1EE5", "\u1EE7", "\u1EE9", "\u1EEB", "\u1EED", "\u1EEF", "\u1EF1", "\u1EF3", "\u1EF5", "\u1EF7", "\u1EF9", "\u1EFB", "\u1EFD", ["\u1EFF", "\u1F07"], ["\u1F10", "\u1F15"], ["\u1F20", "\u1F27"], ["\u1F30", "\u1F37"], ["\u1F40", "\u1F45"], ["\u1F50", "\u1F57"], ["\u1F60", "\u1F67"], ["\u1F70", "\u1F7D"], ["\u1F80", "\u1F87"], ["\u1F90", "\u1F97"], ["\u1FA0", "\u1FA7"], ["\u1FB0", "\u1FB4"], ["\u1FB6", "\u1FB7"], "\u1FBE", ["\u1FC2", "\u1FC4"], ["\u1FC6", "\u1FC7"], ["\u1FD0", "\u1FD3"], ["\u1FD6", "\u1FD7"], ["\u1FE0", "\u1FE7"], ["\u1FF2", "\u1FF4"], ["\u1FF6", "\u1FF7"], "\u210A", ["\u210E", "\u210F"], "\u2113", "\u212F", "\u2134", "\u2139", ["\u213C", "\u213D"], ["\u2146", "\u2149"], "\u214E", "\u2184", ["\u2C30", "\u2C5E"], "\u2C61", ["\u2C65", "\u2C66"], "\u2C68", "\u2C6A", "\u2C6C", "\u2C71", ["\u2C73", "\u2C74"], ["\u2C76", "\u2C7B"], "\u2C81", "\u2C83", "\u2C85", "\u2C87", "\u2C89", "\u2C8B", "\u2C8D", "\u2C8F", "\u2C91", "\u2C93", "\u2C95", "\u2C97", "\u2C99", "\u2C9B", "\u2C9D", "\u2C9F", "\u2CA1", "\u2CA3", "\u2CA5", "\u2CA7", "\u2CA9", "\u2CAB", "\u2CAD", "\u2CAF", "\u2CB1", "\u2CB3", "\u2CB5", "\u2CB7", "\u2CB9", "\u2CBB", "\u2CBD", "\u2CBF", "\u2CC1", "\u2CC3", "\u2CC5", "\u2CC7", "\u2CC9", "\u2CCB", "\u2CCD", "\u2CCF", "\u2CD1", "\u2CD3", "\u2CD5", "\u2CD7", "\u2CD9", "\u2CDB", "\u2CDD", "\u2CDF", "\u2CE1", ["\u2CE3", "\u2CE4"], "\u2CEC", "\u2CEE", "\u2CF3", ["\u2D00", "\u2D25"], "\u2D27", "\u2D2D", "\uA641", "\uA643", "\uA645", "\uA647", "\uA649", "\uA64B", "\uA64D", "\uA64F", "\uA651", "\uA653", "\uA655", "\uA657", "\uA659", "\uA65B", "\uA65D", "\uA65F", "\uA661", "\uA663", "\uA665", "\uA667", "\uA669", "\uA66B", "\uA66D", "\uA681", "\uA683", "\uA685", "\uA687", "\uA689", "\uA68B", "\uA68D", "\uA68F", "\uA691", "\uA693", "\uA695", "\uA697", "\uA699", "\uA69B", "\uA723", "\uA725", "\uA727", "\uA729", "\uA72B", "\uA72D", ["\uA72F", "\uA731"], "\uA733", "\uA735", "\uA737", "\uA739", "\uA73B", "\uA73D", "\uA73F", "\uA741", "\uA743", "\uA745", "\uA747", "\uA749", "\uA74B", "\uA74D", "\uA74F", "\uA751", "\uA753", "\uA755", "\uA757", "\uA759", "\uA75B", "\uA75D", "\uA75F", "\uA761", "\uA763", "\uA765", "\uA767", "\uA769", "\uA76B", "\uA76D", "\uA76F", ["\uA771", "\uA778"], "\uA77A", "\uA77C", "\uA77F", "\uA781", "\uA783", "\uA785", "\uA787", "\uA78C", "\uA78E", "\uA791", ["\uA793", "\uA795"], "\uA797", "\uA799", "\uA79B", "\uA79D", "\uA79F", "\uA7A1", "\uA7A3", "\uA7A5", "\uA7A7", "\uA7A9", "\uA7B5", "\uA7B7", "\uA7FA", ["\uAB30", "\uAB5A"], ["\uAB60", "\uAB65"], ["\uAB70", "\uABBF"], ["\uFB00", "\uFB06"], ["\uFB13", "\uFB17"], ["\uFF41", "\uFF5A"]], false, false);
  var peg$e45 = peg$classExpectation([["\u02B0", "\u02C1"], ["\u02C6", "\u02D1"], ["\u02E0", "\u02E4"], "\u02EC", "\u02EE", "\u0374", "\u037A", "\u0559", "\u0640", ["\u06E5", "\u06E6"], ["\u07F4", "\u07F5"], "\u07FA", "\u081A", "\u0824", "\u0828", "\u0971", "\u0E46", "\u0EC6", "\u10FC", "\u17D7", "\u1843", "\u1AA7", ["\u1C78", "\u1C7D"], ["\u1D2C", "\u1D6A"], "\u1D78", ["\u1D9B", "\u1DBF"], "\u2071", "\u207F", ["\u2090", "\u209C"], ["\u2C7C", "\u2C7D"], "\u2D6F", "\u2E2F", "\u3005", ["\u3031", "\u3035"], "\u303B", ["\u309D", "\u309E"], ["\u30FC", "\u30FE"], "\uA015", ["\uA4F8", "\uA4FD"], "\uA60C", "\uA67F", ["\uA69C", "\uA69D"], ["\uA717", "\uA71F"], "\uA770", "\uA788", ["\uA7F8", "\uA7F9"], "\uA9CF", "\uA9E6", "\uAA70", "\uAADD", ["\uAAF3", "\uAAF4"], ["\uAB5C", "\uAB5F"], "\uFF70", ["\uFF9E", "\uFF9F"]], false, false);
  var peg$e46 = peg$classExpectation(["\xAA", "\xBA", "\u01BB", ["\u01C0", "\u01C3"], "\u0294", ["\u05D0", "\u05EA"], ["\u05F0", "\u05F2"], ["\u0620", "\u063F"], ["\u0641", "\u064A"], ["\u066E", "\u066F"], ["\u0671", "\u06D3"], "\u06D5", ["\u06EE", "\u06EF"], ["\u06FA", "\u06FC"], "\u06FF", "\u0710", ["\u0712", "\u072F"], ["\u074D", "\u07A5"], "\u07B1", ["\u07CA", "\u07EA"], ["\u0800", "\u0815"], ["\u0840", "\u0858"], ["\u08A0", "\u08B4"], ["\u0904", "\u0939"], "\u093D", "\u0950", ["\u0958", "\u0961"], ["\u0972", "\u0980"], ["\u0985", "\u098C"], ["\u098F", "\u0990"], ["\u0993", "\u09A8"], ["\u09AA", "\u09B0"], "\u09B2", ["\u09B6", "\u09B9"], "\u09BD", "\u09CE", ["\u09DC", "\u09DD"], ["\u09DF", "\u09E1"], ["\u09F0", "\u09F1"], ["\u0A05", "\u0A0A"], ["\u0A0F", "\u0A10"], ["\u0A13", "\u0A28"], ["\u0A2A", "\u0A30"], ["\u0A32", "\u0A33"], ["\u0A35", "\u0A36"], ["\u0A38", "\u0A39"], ["\u0A59", "\u0A5C"], "\u0A5E", ["\u0A72", "\u0A74"], ["\u0A85", "\u0A8D"], ["\u0A8F", "\u0A91"], ["\u0A93", "\u0AA8"], ["\u0AAA", "\u0AB0"], ["\u0AB2", "\u0AB3"], ["\u0AB5", "\u0AB9"], "\u0ABD", "\u0AD0", ["\u0AE0", "\u0AE1"], "\u0AF9", ["\u0B05", "\u0B0C"], ["\u0B0F", "\u0B10"], ["\u0B13", "\u0B28"], ["\u0B2A", "\u0B30"], ["\u0B32", "\u0B33"], ["\u0B35", "\u0B39"], "\u0B3D", ["\u0B5C", "\u0B5D"], ["\u0B5F", "\u0B61"], "\u0B71", "\u0B83", ["\u0B85", "\u0B8A"], ["\u0B8E", "\u0B90"], ["\u0B92", "\u0B95"], ["\u0B99", "\u0B9A"], "\u0B9C", ["\u0B9E", "\u0B9F"], ["\u0BA3", "\u0BA4"], ["\u0BA8", "\u0BAA"], ["\u0BAE", "\u0BB9"], "\u0BD0", ["\u0C05", "\u0C0C"], ["\u0C0E", "\u0C10"], ["\u0C12", "\u0C28"], ["\u0C2A", "\u0C39"], "\u0C3D", ["\u0C58", "\u0C5A"], ["\u0C60", "\u0C61"], ["\u0C85", "\u0C8C"], ["\u0C8E", "\u0C90"], ["\u0C92", "\u0CA8"], ["\u0CAA", "\u0CB3"], ["\u0CB5", "\u0CB9"], "\u0CBD", "\u0CDE", ["\u0CE0", "\u0CE1"], ["\u0CF1", "\u0CF2"], ["\u0D05", "\u0D0C"], ["\u0D0E", "\u0D10"], ["\u0D12", "\u0D3A"], "\u0D3D", "\u0D4E", ["\u0D5F", "\u0D61"], ["\u0D7A", "\u0D7F"], ["\u0D85", "\u0D96"], ["\u0D9A", "\u0DB1"], ["\u0DB3", "\u0DBB"], "\u0DBD", ["\u0DC0", "\u0DC6"], ["\u0E01", "\u0E30"], ["\u0E32", "\u0E33"], ["\u0E40", "\u0E45"], ["\u0E81", "\u0E82"], "\u0E84", ["\u0E87", "\u0E88"], "\u0E8A", "\u0E8D", ["\u0E94", "\u0E97"], ["\u0E99", "\u0E9F"], ["\u0EA1", "\u0EA3"], "\u0EA5", "\u0EA7", ["\u0EAA", "\u0EAB"], ["\u0EAD", "\u0EB0"], ["\u0EB2", "\u0EB3"], "\u0EBD", ["\u0EC0", "\u0EC4"], ["\u0EDC", "\u0EDF"], "\u0F00", ["\u0F40", "\u0F47"], ["\u0F49", "\u0F6C"], ["\u0F88", "\u0F8C"], ["\u1000", "\u102A"], "\u103F", ["\u1050", "\u1055"], ["\u105A", "\u105D"], "\u1061", ["\u1065", "\u1066"], ["\u106E", "\u1070"], ["\u1075", "\u1081"], "\u108E", ["\u10D0", "\u10FA"], ["\u10FD", "\u1248"], ["\u124A", "\u124D"], ["\u1250", "\u1256"], "\u1258", ["\u125A", "\u125D"], ["\u1260", "\u1288"], ["\u128A", "\u128D"], ["\u1290", "\u12B0"], ["\u12B2", "\u12B5"], ["\u12B8", "\u12BE"], "\u12C0", ["\u12C2", "\u12C5"], ["\u12C8", "\u12D6"], ["\u12D8", "\u1310"], ["\u1312", "\u1315"], ["\u1318", "\u135A"], ["\u1380", "\u138F"], ["\u1401", "\u166C"], ["\u166F", "\u167F"], ["\u1681", "\u169A"], ["\u16A0", "\u16EA"], ["\u16F1", "\u16F8"], ["\u1700", "\u170C"], ["\u170E", "\u1711"], ["\u1720", "\u1731"], ["\u1740", "\u1751"], ["\u1760", "\u176C"], ["\u176E", "\u1770"], ["\u1780", "\u17B3"], "\u17DC", ["\u1820", "\u1842"], ["\u1844", "\u1877"], ["\u1880", "\u18A8"], "\u18AA", ["\u18B0", "\u18F5"], ["\u1900", "\u191E"], ["\u1950", "\u196D"], ["\u1970", "\u1974"], ["\u1980", "\u19AB"], ["\u19B0", "\u19C9"], ["\u1A00", "\u1A16"], ["\u1A20", "\u1A54"], ["\u1B05", "\u1B33"], ["\u1B45", "\u1B4B"], ["\u1B83", "\u1BA0"], ["\u1BAE", "\u1BAF"], ["\u1BBA", "\u1BE5"], ["\u1C00", "\u1C23"], ["\u1C4D", "\u1C4F"], ["\u1C5A", "\u1C77"], ["\u1CE9", "\u1CEC"], ["\u1CEE", "\u1CF1"], ["\u1CF5", "\u1CF6"], ["\u2135", "\u2138"], ["\u2D30", "\u2D67"], ["\u2D80", "\u2D96"], ["\u2DA0", "\u2DA6"], ["\u2DA8", "\u2DAE"], ["\u2DB0", "\u2DB6"], ["\u2DB8", "\u2DBE"], ["\u2DC0", "\u2DC6"], ["\u2DC8", "\u2DCE"], ["\u2DD0", "\u2DD6"], ["\u2DD8", "\u2DDE"], "\u3006", "\u303C", ["\u3041", "\u3096"], "\u309F", ["\u30A1", "\u30FA"], "\u30FF", ["\u3105", "\u312D"], ["\u3131", "\u318E"], ["\u31A0", "\u31BA"], ["\u31F0", "\u31FF"], ["\u3400", "\u4DB5"], ["\u4E00", "\u9FD5"], ["\uA000", "\uA014"], ["\uA016", "\uA48C"], ["\uA4D0", "\uA4F7"], ["\uA500", "\uA60B"], ["\uA610", "\uA61F"], ["\uA62A", "\uA62B"], "\uA66E", ["\uA6A0", "\uA6E5"], "\uA78F", "\uA7F7", ["\uA7FB", "\uA801"], ["\uA803", "\uA805"], ["\uA807", "\uA80A"], ["\uA80C", "\uA822"], ["\uA840", "\uA873"], ["\uA882", "\uA8B3"], ["\uA8F2", "\uA8F7"], "\uA8FB", "\uA8FD", ["\uA90A", "\uA925"], ["\uA930", "\uA946"], ["\uA960", "\uA97C"], ["\uA984", "\uA9B2"], ["\uA9E0", "\uA9E4"], ["\uA9E7", "\uA9EF"], ["\uA9FA", "\uA9FE"], ["\uAA00", "\uAA28"], ["\uAA40", "\uAA42"], ["\uAA44", "\uAA4B"], ["\uAA60", "\uAA6F"], ["\uAA71", "\uAA76"], "\uAA7A", ["\uAA7E", "\uAAAF"], "\uAAB1", ["\uAAB5", "\uAAB6"], ["\uAAB9", "\uAABD"], "\uAAC0", "\uAAC2", ["\uAADB", "\uAADC"], ["\uAAE0", "\uAAEA"], "\uAAF2", ["\uAB01", "\uAB06"], ["\uAB09", "\uAB0E"], ["\uAB11", "\uAB16"], ["\uAB20", "\uAB26"], ["\uAB28", "\uAB2E"], ["\uABC0", "\uABE2"], ["\uAC00", "\uD7A3"], ["\uD7B0", "\uD7C6"], ["\uD7CB", "\uD7FB"], ["\uF900", "\uFA6D"], ["\uFA70", "\uFAD9"], "\uFB1D", ["\uFB1F", "\uFB28"], ["\uFB2A", "\uFB36"], ["\uFB38", "\uFB3C"], "\uFB3E", ["\uFB40", "\uFB41"], ["\uFB43", "\uFB44"], ["\uFB46", "\uFBB1"], ["\uFBD3", "\uFD3D"], ["\uFD50", "\uFD8F"], ["\uFD92", "\uFDC7"], ["\uFDF0", "\uFDFB"], ["\uFE70", "\uFE74"], ["\uFE76", "\uFEFC"], ["\uFF66", "\uFF6F"], ["\uFF71", "\uFF9D"], ["\uFFA0", "\uFFBE"], ["\uFFC2", "\uFFC7"], ["\uFFCA", "\uFFCF"], ["\uFFD2", "\uFFD7"], ["\uFFDA", "\uFFDC"]], false, false);
  var peg$e47 = peg$classExpectation(["\u01C5", "\u01C8", "\u01CB", "\u01F2", ["\u1F88", "\u1F8F"], ["\u1F98", "\u1F9F"], ["\u1FA8", "\u1FAF"], "\u1FBC", "\u1FCC", "\u1FFC"], false, false);
  var peg$e48 = peg$classExpectation([["A", "Z"], ["\xC0", "\xD6"], ["\xD8", "\xDE"], "\u0100", "\u0102", "\u0104", "\u0106", "\u0108", "\u010A", "\u010C", "\u010E", "\u0110", "\u0112", "\u0114", "\u0116", "\u0118", "\u011A", "\u011C", "\u011E", "\u0120", "\u0122", "\u0124", "\u0126", "\u0128", "\u012A", "\u012C", "\u012E", "\u0130", "\u0132", "\u0134", "\u0136", "\u0139", "\u013B", "\u013D", "\u013F", "\u0141", "\u0143", "\u0145", "\u0147", "\u014A", "\u014C", "\u014E", "\u0150", "\u0152", "\u0154", "\u0156", "\u0158", "\u015A", "\u015C", "\u015E", "\u0160", "\u0162", "\u0164", "\u0166", "\u0168", "\u016A", "\u016C", "\u016E", "\u0170", "\u0172", "\u0174", "\u0176", ["\u0178", "\u0179"], "\u017B", "\u017D", ["\u0181", "\u0182"], "\u0184", ["\u0186", "\u0187"], ["\u0189", "\u018B"], ["\u018E", "\u0191"], ["\u0193", "\u0194"], ["\u0196", "\u0198"], ["\u019C", "\u019D"], ["\u019F", "\u01A0"], "\u01A2", "\u01A4", ["\u01A6", "\u01A7"], "\u01A9", "\u01AC", ["\u01AE", "\u01AF"], ["\u01B1", "\u01B3"], "\u01B5", ["\u01B7", "\u01B8"], "\u01BC", "\u01C4", "\u01C7", "\u01CA", "\u01CD", "\u01CF", "\u01D1", "\u01D3", "\u01D5", "\u01D7", "\u01D9", "\u01DB", "\u01DE", "\u01E0", "\u01E2", "\u01E4", "\u01E6", "\u01E8", "\u01EA", "\u01EC", "\u01EE", "\u01F1", "\u01F4", ["\u01F6", "\u01F8"], "\u01FA", "\u01FC", "\u01FE", "\u0200", "\u0202", "\u0204", "\u0206", "\u0208", "\u020A", "\u020C", "\u020E", "\u0210", "\u0212", "\u0214", "\u0216", "\u0218", "\u021A", "\u021C", "\u021E", "\u0220", "\u0222", "\u0224", "\u0226", "\u0228", "\u022A", "\u022C", "\u022E", "\u0230", "\u0232", ["\u023A", "\u023B"], ["\u023D", "\u023E"], "\u0241", ["\u0243", "\u0246"], "\u0248", "\u024A", "\u024C", "\u024E", "\u0370", "\u0372", "\u0376", "\u037F", "\u0386", ["\u0388", "\u038A"], "\u038C", ["\u038E", "\u038F"], ["\u0391", "\u03A1"], ["\u03A3", "\u03AB"], "\u03CF", ["\u03D2", "\u03D4"], "\u03D8", "\u03DA", "\u03DC", "\u03DE", "\u03E0", "\u03E2", "\u03E4", "\u03E6", "\u03E8", "\u03EA", "\u03EC", "\u03EE", "\u03F4", "\u03F7", ["\u03F9", "\u03FA"], ["\u03FD", "\u042F"], "\u0460", "\u0462", "\u0464", "\u0466", "\u0468", "\u046A", "\u046C", "\u046E", "\u0470", "\u0472", "\u0474", "\u0476", "\u0478", "\u047A", "\u047C", "\u047E", "\u0480", "\u048A", "\u048C", "\u048E", "\u0490", "\u0492", "\u0494", "\u0496", "\u0498", "\u049A", "\u049C", "\u049E", "\u04A0", "\u04A2", "\u04A4", "\u04A6", "\u04A8", "\u04AA", "\u04AC", "\u04AE", "\u04B0", "\u04B2", "\u04B4", "\u04B6", "\u04B8", "\u04BA", "\u04BC", "\u04BE", ["\u04C0", "\u04C1"], "\u04C3", "\u04C5", "\u04C7", "\u04C9", "\u04CB", "\u04CD", "\u04D0", "\u04D2", "\u04D4", "\u04D6", "\u04D8", "\u04DA", "\u04DC", "\u04DE", "\u04E0", "\u04E2", "\u04E4", "\u04E6", "\u04E8", "\u04EA", "\u04EC", "\u04EE", "\u04F0", "\u04F2", "\u04F4", "\u04F6", "\u04F8", "\u04FA", "\u04FC", "\u04FE", "\u0500", "\u0502", "\u0504", "\u0506", "\u0508", "\u050A", "\u050C", "\u050E", "\u0510", "\u0512", "\u0514", "\u0516", "\u0518", "\u051A", "\u051C", "\u051E", "\u0520", "\u0522", "\u0524", "\u0526", "\u0528", "\u052A", "\u052C", "\u052E", ["\u0531", "\u0556"], ["\u10A0", "\u10C5"], "\u10C7", "\u10CD", ["\u13A0", "\u13F5"], "\u1E00", "\u1E02", "\u1E04", "\u1E06", "\u1E08", "\u1E0A", "\u1E0C", "\u1E0E", "\u1E10", "\u1E12", "\u1E14", "\u1E16", "\u1E18", "\u1E1A", "\u1E1C", "\u1E1E", "\u1E20", "\u1E22", "\u1E24", "\u1E26", "\u1E28", "\u1E2A", "\u1E2C", "\u1E2E", "\u1E30", "\u1E32", "\u1E34", "\u1E36", "\u1E38", "\u1E3A", "\u1E3C", "\u1E3E", "\u1E40", "\u1E42", "\u1E44", "\u1E46", "\u1E48", "\u1E4A", "\u1E4C", "\u1E4E", "\u1E50", "\u1E52", "\u1E54", "\u1E56", "\u1E58", "\u1E5A", "\u1E5C", "\u1E5E", "\u1E60", "\u1E62", "\u1E64", "\u1E66", "\u1E68", "\u1E6A", "\u1E6C", "\u1E6E", "\u1E70", "\u1E72", "\u1E74", "\u1E76", "\u1E78", "\u1E7A", "\u1E7C", "\u1E7E", "\u1E80", "\u1E82", "\u1E84", "\u1E86", "\u1E88", "\u1E8A", "\u1E8C", "\u1E8E", "\u1E90", "\u1E92", "\u1E94", "\u1E9E", "\u1EA0", "\u1EA2", "\u1EA4", "\u1EA6", "\u1EA8", "\u1EAA", "\u1EAC", "\u1EAE", "\u1EB0", "\u1EB2", "\u1EB4", "\u1EB6", "\u1EB8", "\u1EBA", "\u1EBC", "\u1EBE", "\u1EC0", "\u1EC2", "\u1EC4", "\u1EC6", "\u1EC8", "\u1ECA", "\u1ECC", "\u1ECE", "\u1ED0", "\u1ED2", "\u1ED4", "\u1ED6", "\u1ED8", "\u1EDA", "\u1EDC", "\u1EDE", "\u1EE0", "\u1EE2", "\u1EE4", "\u1EE6", "\u1EE8", "\u1EEA", "\u1EEC", "\u1EEE", "\u1EF0", "\u1EF2", "\u1EF4", "\u1EF6", "\u1EF8", "\u1EFA", "\u1EFC", "\u1EFE", ["\u1F08", "\u1F0F"], ["\u1F18", "\u1F1D"], ["\u1F28", "\u1F2F"], ["\u1F38", "\u1F3F"], ["\u1F48", "\u1F4D"], "\u1F59", "\u1F5B", "\u1F5D", "\u1F5F", ["\u1F68", "\u1F6F"], ["\u1FB8", "\u1FBB"], ["\u1FC8", "\u1FCB"], ["\u1FD8", "\u1FDB"], ["\u1FE8", "\u1FEC"], ["\u1FF8", "\u1FFB"], "\u2102", "\u2107", ["\u210B", "\u210D"], ["\u2110", "\u2112"], "\u2115", ["\u2119", "\u211D"], "\u2124", "\u2126", "\u2128", ["\u212A", "\u212D"], ["\u2130", "\u2133"], ["\u213E", "\u213F"], "\u2145", "\u2183", ["\u2C00", "\u2C2E"], "\u2C60", ["\u2C62", "\u2C64"], "\u2C67", "\u2C69", "\u2C6B", ["\u2C6D", "\u2C70"], "\u2C72", "\u2C75", ["\u2C7E", "\u2C80"], "\u2C82", "\u2C84", "\u2C86", "\u2C88", "\u2C8A", "\u2C8C", "\u2C8E", "\u2C90", "\u2C92", "\u2C94", "\u2C96", "\u2C98", "\u2C9A", "\u2C9C", "\u2C9E", "\u2CA0", "\u2CA2", "\u2CA4", "\u2CA6", "\u2CA8", "\u2CAA", "\u2CAC", "\u2CAE", "\u2CB0", "\u2CB2", "\u2CB4", "\u2CB6", "\u2CB8", "\u2CBA", "\u2CBC", "\u2CBE", "\u2CC0", "\u2CC2", "\u2CC4", "\u2CC6", "\u2CC8", "\u2CCA", "\u2CCC", "\u2CCE", "\u2CD0", "\u2CD2", "\u2CD4", "\u2CD6", "\u2CD8", "\u2CDA", "\u2CDC", "\u2CDE", "\u2CE0", "\u2CE2", "\u2CEB", "\u2CED", "\u2CF2", "\uA640", "\uA642", "\uA644", "\uA646", "\uA648", "\uA64A", "\uA64C", "\uA64E", "\uA650", "\uA652", "\uA654", "\uA656", "\uA658", "\uA65A", "\uA65C", "\uA65E", "\uA660", "\uA662", "\uA664", "\uA666", "\uA668", "\uA66A", "\uA66C", "\uA680", "\uA682", "\uA684", "\uA686", "\uA688", "\uA68A", "\uA68C", "\uA68E", "\uA690", "\uA692", "\uA694", "\uA696", "\uA698", "\uA69A", "\uA722", "\uA724", "\uA726", "\uA728", "\uA72A", "\uA72C", "\uA72E", "\uA732", "\uA734", "\uA736", "\uA738", "\uA73A", "\uA73C", "\uA73E", "\uA740", "\uA742", "\uA744", "\uA746", "\uA748", "\uA74A", "\uA74C", "\uA74E", "\uA750", "\uA752", "\uA754", "\uA756", "\uA758", "\uA75A", "\uA75C", "\uA75E", "\uA760", "\uA762", "\uA764", "\uA766", "\uA768", "\uA76A", "\uA76C", "\uA76E", "\uA779", "\uA77B", ["\uA77D", "\uA77E"], "\uA780", "\uA782", "\uA784", "\uA786", "\uA78B", "\uA78D", "\uA790", "\uA792", "\uA796", "\uA798", "\uA79A", "\uA79C", "\uA79E", "\uA7A0", "\uA7A2", "\uA7A4", "\uA7A6", "\uA7A8", ["\uA7AA", "\uA7AD"], ["\uA7B0", "\uA7B4"], "\uA7B6", ["\uFF21", "\uFF3A"]], false, false);
  var peg$e49 = peg$classExpectation(["\u0903", "\u093B", ["\u093E", "\u0940"], ["\u0949", "\u094C"], ["\u094E", "\u094F"], ["\u0982", "\u0983"], ["\u09BE", "\u09C0"], ["\u09C7", "\u09C8"], ["\u09CB", "\u09CC"], "\u09D7", "\u0A03", ["\u0A3E", "\u0A40"], "\u0A83", ["\u0ABE", "\u0AC0"], "\u0AC9", ["\u0ACB", "\u0ACC"], ["\u0B02", "\u0B03"], "\u0B3E", "\u0B40", ["\u0B47", "\u0B48"], ["\u0B4B", "\u0B4C"], "\u0B57", ["\u0BBE", "\u0BBF"], ["\u0BC1", "\u0BC2"], ["\u0BC6", "\u0BC8"], ["\u0BCA", "\u0BCC"], "\u0BD7", ["\u0C01", "\u0C03"], ["\u0C41", "\u0C44"], ["\u0C82", "\u0C83"], "\u0CBE", ["\u0CC0", "\u0CC4"], ["\u0CC7", "\u0CC8"], ["\u0CCA", "\u0CCB"], ["\u0CD5", "\u0CD6"], ["\u0D02", "\u0D03"], ["\u0D3E", "\u0D40"], ["\u0D46", "\u0D48"], ["\u0D4A", "\u0D4C"], "\u0D57", ["\u0D82", "\u0D83"], ["\u0DCF", "\u0DD1"], ["\u0DD8", "\u0DDF"], ["\u0DF2", "\u0DF3"], ["\u0F3E", "\u0F3F"], "\u0F7F", ["\u102B", "\u102C"], "\u1031", "\u1038", ["\u103B", "\u103C"], ["\u1056", "\u1057"], ["\u1062", "\u1064"], ["\u1067", "\u106D"], ["\u1083", "\u1084"], ["\u1087", "\u108C"], "\u108F", ["\u109A", "\u109C"], "\u17B6", ["\u17BE", "\u17C5"], ["\u17C7", "\u17C8"], ["\u1923", "\u1926"], ["\u1929", "\u192B"], ["\u1930", "\u1931"], ["\u1933", "\u1938"], ["\u1A19", "\u1A1A"], "\u1A55", "\u1A57", "\u1A61", ["\u1A63", "\u1A64"], ["\u1A6D", "\u1A72"], "\u1B04", "\u1B35", "\u1B3B", ["\u1B3D", "\u1B41"], ["\u1B43", "\u1B44"], "\u1B82", "\u1BA1", ["\u1BA6", "\u1BA7"], "\u1BAA", "\u1BE7", ["\u1BEA", "\u1BEC"], "\u1BEE", ["\u1BF2", "\u1BF3"], ["\u1C24", "\u1C2B"], ["\u1C34", "\u1C35"], "\u1CE1", ["\u1CF2", "\u1CF3"], ["\u302E", "\u302F"], ["\uA823", "\uA824"], "\uA827", ["\uA880", "\uA881"], ["\uA8B4", "\uA8C3"], ["\uA952", "\uA953"], "\uA983", ["\uA9B4", "\uA9B5"], ["\uA9BA", "\uA9BB"], ["\uA9BD", "\uA9C0"], ["\uAA2F", "\uAA30"], ["\uAA33", "\uAA34"], "\uAA4D", "\uAA7B", "\uAA7D", "\uAAEB", ["\uAAEE", "\uAAEF"], "\uAAF5", ["\uABE3", "\uABE4"], ["\uABE6", "\uABE7"], ["\uABE9", "\uABEA"], "\uABEC"], false, false);
  var peg$e50 = peg$classExpectation([["\u0300", "\u036F"], ["\u0483", "\u0487"], ["\u0591", "\u05BD"], "\u05BF", ["\u05C1", "\u05C2"], ["\u05C4", "\u05C5"], "\u05C7", ["\u0610", "\u061A"], ["\u064B", "\u065F"], "\u0670", ["\u06D6", "\u06DC"], ["\u06DF", "\u06E4"], ["\u06E7", "\u06E8"], ["\u06EA", "\u06ED"], "\u0711", ["\u0730", "\u074A"], ["\u07A6", "\u07B0"], ["\u07EB", "\u07F3"], ["\u0816", "\u0819"], ["\u081B", "\u0823"], ["\u0825", "\u0827"], ["\u0829", "\u082D"], ["\u0859", "\u085B"], ["\u08E3", "\u0902"], "\u093A", "\u093C", ["\u0941", "\u0948"], "\u094D", ["\u0951", "\u0957"], ["\u0962", "\u0963"], "\u0981", "\u09BC", ["\u09C1", "\u09C4"], "\u09CD", ["\u09E2", "\u09E3"], ["\u0A01", "\u0A02"], "\u0A3C", ["\u0A41", "\u0A42"], ["\u0A47", "\u0A48"], ["\u0A4B", "\u0A4D"], "\u0A51", ["\u0A70", "\u0A71"], "\u0A75", ["\u0A81", "\u0A82"], "\u0ABC", ["\u0AC1", "\u0AC5"], ["\u0AC7", "\u0AC8"], "\u0ACD", ["\u0AE2", "\u0AE3"], "\u0B01", "\u0B3C", "\u0B3F", ["\u0B41", "\u0B44"], "\u0B4D", "\u0B56", ["\u0B62", "\u0B63"], "\u0B82", "\u0BC0", "\u0BCD", "\u0C00", ["\u0C3E", "\u0C40"], ["\u0C46", "\u0C48"], ["\u0C4A", "\u0C4D"], ["\u0C55", "\u0C56"], ["\u0C62", "\u0C63"], "\u0C81", "\u0CBC", "\u0CBF", "\u0CC6", ["\u0CCC", "\u0CCD"], ["\u0CE2", "\u0CE3"], "\u0D01", ["\u0D41", "\u0D44"], "\u0D4D", ["\u0D62", "\u0D63"], "\u0DCA", ["\u0DD2", "\u0DD4"], "\u0DD6", "\u0E31", ["\u0E34", "\u0E3A"], ["\u0E47", "\u0E4E"], "\u0EB1", ["\u0EB4", "\u0EB9"], ["\u0EBB", "\u0EBC"], ["\u0EC8", "\u0ECD"], ["\u0F18", "\u0F19"], "\u0F35", "\u0F37", "\u0F39", ["\u0F71", "\u0F7E"], ["\u0F80", "\u0F84"], ["\u0F86", "\u0F87"], ["\u0F8D", "\u0F97"], ["\u0F99", "\u0FBC"], "\u0FC6", ["\u102D", "\u1030"], ["\u1032", "\u1037"], ["\u1039", "\u103A"], ["\u103D", "\u103E"], ["\u1058", "\u1059"], ["\u105E", "\u1060"], ["\u1071", "\u1074"], "\u1082", ["\u1085", "\u1086"], "\u108D", "\u109D", ["\u135D", "\u135F"], ["\u1712", "\u1714"], ["\u1732", "\u1734"], ["\u1752", "\u1753"], ["\u1772", "\u1773"], ["\u17B4", "\u17B5"], ["\u17B7", "\u17BD"], "\u17C6", ["\u17C9", "\u17D3"], "\u17DD", ["\u180B", "\u180D"], "\u18A9", ["\u1920", "\u1922"], ["\u1927", "\u1928"], "\u1932", ["\u1939", "\u193B"], ["\u1A17", "\u1A18"], "\u1A1B", "\u1A56", ["\u1A58", "\u1A5E"], "\u1A60", "\u1A62", ["\u1A65", "\u1A6C"], ["\u1A73", "\u1A7C"], "\u1A7F", ["\u1AB0", "\u1ABD"], ["\u1B00", "\u1B03"], "\u1B34", ["\u1B36", "\u1B3A"], "\u1B3C", "\u1B42", ["\u1B6B", "\u1B73"], ["\u1B80", "\u1B81"], ["\u1BA2", "\u1BA5"], ["\u1BA8", "\u1BA9"], ["\u1BAB", "\u1BAD"], "\u1BE6", ["\u1BE8", "\u1BE9"], "\u1BED", ["\u1BEF", "\u1BF1"], ["\u1C2C", "\u1C33"], ["\u1C36", "\u1C37"], ["\u1CD0", "\u1CD2"], ["\u1CD4", "\u1CE0"], ["\u1CE2", "\u1CE8"], "\u1CED", "\u1CF4", ["\u1CF8", "\u1CF9"], ["\u1DC0", "\u1DF5"], ["\u1DFC", "\u1DFF"], ["\u20D0", "\u20DC"], "\u20E1", ["\u20E5", "\u20F0"], ["\u2CEF", "\u2CF1"], "\u2D7F", ["\u2DE0", "\u2DFF"], ["\u302A", "\u302D"], ["\u3099", "\u309A"], "\uA66F", ["\uA674", "\uA67D"], ["\uA69E", "\uA69F"], ["\uA6F0", "\uA6F1"], "\uA802", "\uA806", "\uA80B", ["\uA825", "\uA826"], "\uA8C4", ["\uA8E0", "\uA8F1"], ["\uA926", "\uA92D"], ["\uA947", "\uA951"], ["\uA980", "\uA982"], "\uA9B3", ["\uA9B6", "\uA9B9"], "\uA9BC", "\uA9E5", ["\uAA29", "\uAA2E"], ["\uAA31", "\uAA32"], ["\uAA35", "\uAA36"], "\uAA43", "\uAA4C", "\uAA7C", "\uAAB0", ["\uAAB2", "\uAAB4"], ["\uAAB7", "\uAAB8"], ["\uAABE", "\uAABF"], "\uAAC1", ["\uAAEC", "\uAAED"], "\uAAF6", "\uABE5", "\uABE8", "\uABED", "\uFB1E", ["\uFE00", "\uFE0F"], ["\uFE20", "\uFE2F"]], false, false);
  var peg$e51 = peg$classExpectation([["0", "9"], ["\u0660", "\u0669"], ["\u06F0", "\u06F9"], ["\u07C0", "\u07C9"], ["\u0966", "\u096F"], ["\u09E6", "\u09EF"], ["\u0A66", "\u0A6F"], ["\u0AE6", "\u0AEF"], ["\u0B66", "\u0B6F"], ["\u0BE6", "\u0BEF"], ["\u0C66", "\u0C6F"], ["\u0CE6", "\u0CEF"], ["\u0D66", "\u0D6F"], ["\u0DE6", "\u0DEF"], ["\u0E50", "\u0E59"], ["\u0ED0", "\u0ED9"], ["\u0F20", "\u0F29"], ["\u1040", "\u1049"], ["\u1090", "\u1099"], ["\u17E0", "\u17E9"], ["\u1810", "\u1819"], ["\u1946", "\u194F"], ["\u19D0", "\u19D9"], ["\u1A80", "\u1A89"], ["\u1A90", "\u1A99"], ["\u1B50", "\u1B59"], ["\u1BB0", "\u1BB9"], ["\u1C40", "\u1C49"], ["\u1C50", "\u1C59"], ["\uA620", "\uA629"], ["\uA8D0", "\uA8D9"], ["\uA900", "\uA909"], ["\uA9D0", "\uA9D9"], ["\uA9F0", "\uA9F9"], ["\uAA50", "\uAA59"], ["\uABF0", "\uABF9"], ["\uFF10", "\uFF19"]], false, false);
  var peg$e52 = peg$classExpectation([["\u16EE", "\u16F0"], ["\u2160", "\u2182"], ["\u2185", "\u2188"], "\u3007", ["\u3021", "\u3029"], ["\u3038", "\u303A"], ["\uA6E6", "\uA6EF"]], false, false);
  var peg$e53 = peg$classExpectation(["_", ["\u203F", "\u2040"], "\u2054", ["\uFE33", "\uFE34"], ["\uFE4D", "\uFE4F"], "\uFF3F"], false, false);
  var peg$e54 = peg$classExpectation([" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false);
  var peg$e55 = peg$literalExpectation("emit", false);
  var peg$e56 = peg$literalExpectation("revert", false);
  var peg$e57 = peg$literalExpectation("abstract", false);
  var peg$e58 = peg$literalExpectation("experimental", false);
  var peg$e59 = peg$literalExpectation("override", false);
  var peg$e60 = peg$literalExpectation("abicoder", false);
  var peg$e61 = peg$literalExpectation("external", false);
  var peg$e62 = peg$literalExpectation("pure", false);
  var peg$e63 = peg$literalExpectation("view", false);
  var peg$e64 = peg$literalExpectation("payable", false);
  var peg$e65 = peg$literalExpectation("anonymous", false);
  var peg$e66 = peg$literalExpectation("as", false);
  var peg$e67 = peg$literalExpectation("break", false);
  var peg$e68 = peg$literalExpectation("calldata", false);
  var peg$e69 = peg$literalExpectation("constant", false);
  var peg$e70 = peg$literalExpectation("immutable", false);
  var peg$e71 = peg$literalExpectation("continue", false);
  var peg$e72 = peg$literalExpectation("contract", false);
  var peg$e73 = peg$literalExpectation("constructor", false);
  var peg$e74 = peg$literalExpectation("receive", false);
  var peg$e75 = peg$literalExpectation("fallback", false);
  var peg$e76 = peg$literalExpectation("days", false);
  var peg$e77 = peg$literalExpectation("delete", false);
  var peg$e78 = peg$literalExpectation("do", false);
  var peg$e79 = peg$literalExpectation("else", false);
  var peg$e80 = peg$literalExpectation("enum", false);
  var peg$e81 = peg$literalExpectation("ether", false);
  var peg$e82 = peg$literalExpectation("event", false);
  var peg$e83 = peg$literalExpectation("error", false);
  var peg$e84 = peg$literalExpectation("false", false);
  var peg$e85 = peg$literalExpectation("finney", false);
  var peg$e86 = peg$literalExpectation("for", false);
  var peg$e87 = peg$literalExpectation("from", false);
  var peg$e88 = peg$literalExpectation("function", false);
  var peg$e89 = peg$literalExpectation("get", false);
  var peg$e90 = peg$literalExpectation("hex", false);
  var peg$e91 = peg$literalExpectation("hours", false);
  var peg$e92 = peg$literalExpectation("if", false);
  var peg$e93 = peg$literalExpectation("try", false);
  var peg$e94 = peg$literalExpectation("catch", false);
  var peg$e95 = peg$literalExpectation("is", false);
  var peg$e96 = peg$literalExpectation("indexed", false);
  var peg$e97 = peg$literalExpectation("import", false);
  var peg$e98 = peg$literalExpectation("interface", false);
  var peg$e99 = peg$literalExpectation("internal", false);
  var peg$e100 = peg$literalExpectation("library", false);
  var peg$e101 = peg$literalExpectation("mapping", false);
  var peg$e102 = peg$literalExpectation("memory", false);
  var peg$e103 = peg$literalExpectation("minutes", false);
  var peg$e104 = peg$literalExpectation("modifier", false);
  var peg$e105 = peg$literalExpectation("new", false);
  var peg$e106 = peg$literalExpectation("null", false);
  var peg$e107 = peg$literalExpectation("private", false);
  var peg$e108 = peg$literalExpectation("pragma", false);
  var peg$e109 = peg$literalExpectation("public", false);
  var peg$e110 = peg$literalExpectation("return", false);
  var peg$e111 = peg$literalExpectation("returns", false);
  var peg$e112 = peg$literalExpectation("seconds", false);
  var peg$e113 = peg$literalExpectation("set", false);
  var peg$e114 = peg$literalExpectation("solidity", false);
  var peg$e115 = peg$literalExpectation("storage", false);
  var peg$e116 = peg$literalExpectation("struct", false);
  var peg$e117 = peg$literalExpectation("super", false);
  var peg$e118 = peg$literalExpectation("szabo", false);
  var peg$e119 = peg$literalExpectation("this", false);
  var peg$e120 = peg$literalExpectation("throw", false);
  var peg$e121 = peg$literalExpectation("true", false);
  var peg$e122 = peg$literalExpectation("using", false);
  var peg$e123 = peg$literalExpectation("var", false);
  var peg$e124 = peg$literalExpectation("weeks", false);
  var peg$e125 = peg$literalExpectation("wei", false);
  var peg$e126 = peg$literalExpectation("while", false);
  var peg$e127 = peg$literalExpectation("years", false);
  var peg$e128 = peg$literalExpectation(";", false);
  var peg$e129 = peg$literalExpectation(",", false);
  var peg$e130 = peg$literalExpectation("(", false);
  var peg$e131 = peg$literalExpectation(")", false);
  var peg$e132 = peg$literalExpectation("[", false);
  var peg$e133 = peg$literalExpectation("]", false);
  var peg$e134 = peg$literalExpectation("{", false);
  var peg$e135 = peg$literalExpectation("}", false);
  var peg$e136 = peg$literalExpectation(":", false);
  var peg$e137 = peg$literalExpectation("=", false);
  var peg$e138 = peg$literalExpectation("=>", false);
  var peg$e139 = peg$literalExpectation("++", false);
  var peg$e140 = peg$literalExpectation("--", false);
  var peg$e141 = peg$literalExpectation("+", false);
  var peg$e142 = peg$literalExpectation("-", false);
  var peg$e143 = peg$literalExpectation("~", false);
  var peg$e144 = peg$literalExpectation("!", false);
  var peg$e145 = peg$literalExpectation("*", false);
  var peg$e146 = peg$literalExpectation("/", false);
  var peg$e147 = peg$literalExpectation("%", false);
  var peg$e148 = peg$classExpectation(["+", "="], false, false);
  var peg$e149 = peg$classExpectation(["-", "="], false, false);
  var peg$e150 = peg$literalExpectation("<<", false);
  var peg$e151 = peg$literalExpectation(">>>", false);
  var peg$e152 = peg$literalExpectation(">>", false);
  var peg$e153 = peg$literalExpectation("<=", false);
  var peg$e154 = peg$literalExpectation(">=", false);
  var peg$e155 = peg$literalExpectation("<", false);
  var peg$e156 = peg$literalExpectation(">", false);
  var peg$e157 = peg$literalExpectation("==", false);
  var peg$e158 = peg$literalExpectation("!=", false);
  var peg$e159 = peg$literalExpectation("&", false);
  var peg$e160 = peg$classExpectation(["&", "="], false, false);
  var peg$e161 = peg$literalExpectation("^", false);
  var peg$e162 = peg$literalExpectation("|", false);
  var peg$e163 = peg$classExpectation(["|", "="], false, false);
  var peg$e164 = peg$literalExpectation("&&", false);
  var peg$e165 = peg$literalExpectation("||", false);
  var peg$e166 = peg$literalExpectation("?", false);
  var peg$e167 = peg$literalExpectation("*=", false);
  var peg$e168 = peg$literalExpectation("/=", false);
  var peg$e169 = peg$literalExpectation("%=", false);
  var peg$e170 = peg$literalExpectation("+=", false);
  var peg$e171 = peg$literalExpectation("-=", false);
  var peg$e172 = peg$literalExpectation("<<=", false);
  var peg$e173 = peg$literalExpectation(">>=", false);
  var peg$e174 = peg$literalExpectation("&=", false);
  var peg$e175 = peg$literalExpectation("^=", false);
  var peg$e176 = peg$literalExpectation("|=", false);
  var peg$e177 = peg$literalExpectation("Error", false);
  var peg$e178 = peg$literalExpectation("assembly", false);
  var peg$e179 = peg$literalExpectation("->", false);
  var peg$e180 = peg$literalExpectation("let", false);
  var peg$e181 = peg$literalExpectation(":=", false);

  var peg$f0 = function(program) { return program; };
  var peg$f1 = function(name) { return name; };
  var peg$f2 = function(head, tail) {
        return {
          type: "Identifier",
          name: head + tail.join(""),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f3 = function() {
        return {
          type: "Identifier",
          name: "address_payable",
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f4 = function() { return { type: "Literal", value: true, start: location().start.offset, end: location().end.offset }; };
  var peg$f5 = function() { return { type: "Literal", value: false, start: location().start.offset, end: location().end.offset }; };
  var peg$f6 = function(literal) {
        return literal;
      };
  var peg$f7 = function(token) {
      return token[0];
    };
  var peg$f8 = function(literal, denomination) {
      return {
        type: "DenominationLiteral",
        literal: literal.value,
        denomination: denomination,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f9 = function() {
        return { type: "Literal", value: parseFloat(text().replaceAll('_', '')), start: location().start.offset, end: location().end.offset };
      };
  var peg$f10 = function(digits) {
        return { type: "Literal", value: "0x" + digits, start: location().start.offset, end: location().end.offset };
       };
  var peg$f11 = function(chars) {
        return { type: "Literal", value: chars.join(""), start: location().start.offset, end: location().end.offset };
      };
  var peg$f12 = function(val) {
      return {
        type: "HexLiteral",
        value: val,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f13 = function() { return text(); };
  var peg$f14 = function(sequence) { return sequence; };
  var peg$f15 = function() { return ""; };
  var peg$f16 = function() { return "\0"; };
  var peg$f17 = function() { return "\b";   };
  var peg$f18 = function() { return "\f";   };
  var peg$f19 = function() { return "\n";   };
  var peg$f20 = function() { return "\r";   };
  var peg$f21 = function() { return "\t";   };
  var peg$f22 = function() { return "\x0B"; };
  var peg$f23 = function(digits) {
        return String.fromCharCode(parseInt(digits, 16));
      };
  var peg$f24 = function(operator, major, minor, patch) {
      if (patch === null) {
        patch = 0;
      } else {
        patch = patch[1];
      }

      if (minor === null) {
        minor = 0;
      } else {
        minor = minor[1];
      }

      return {
        type: "VersionLiteral",
        operator: operator,
        version: (normalizeVersionLiteral(major) + "." + normalizeVersionLiteral(minor) + "." + normalizeVersionLiteral(patch)),
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f25 = function() { return { type: "ThisExpression", start: location().start.offset, end: location().end.offset }; };
  var peg$f26 = function(expression) {
        /*
          Need to modify the location here so the position takes into account the "(" & ")".
          Else "(a, b)" (for eg) results in incorrect position.
        */
        expression.start = location().start.offset;
        expression.end = location().end.offset;

        return expression;
      };
  var peg$f27 = function(elision) {
        return {
          type:     "ArrayExpression",
          elements: optionalList(extractOptional(elision, 0)),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f28 = function(elements) {
        return {
          type:     "ArrayExpression",
          elements: elements,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f29 = function(elements, elision) {
        return {
          type:     "ArrayExpression",
          elements: elements.concat(optionalList(extractOptional(elision, 0))),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f30 = function(elision, element) {
          return optionalList(extractOptional(elision, 0)).concat(element);
        };
  var peg$f31 = function(head, elision, element) {
          return optionalList(extractOptional(elision, 0)).concat(element);
        };
  var peg$f32 = function(head, tail) { return Array.prototype.concat.apply(head, tail); };
  var peg$f33 = function(commas) { return filledArray(commas.length + 1, null); };
  var peg$f34 = function(callee, args) {
            return {
              type: "NewExpression",
              callee: callee,
              arguments: args,
              start: location().start.offset,
              end: location().end.offset
            };
          };
  var peg$f35 = function(head, property) {
            return {
              property: property,
              computed: true,
              start: location().start.offset,
              end: location().end.offset
            };
          };
  var peg$f36 = function(head, property) {
            return { property: property, computed: false, start: location().start.offset, end: location().end.offset };
          };
  var peg$f37 = function(head, tail) {
        return buildTree(head, tail, function(result, element) {
          return {
            type:     "MemberExpression",
            object:   result,
            property: element.property,
            computed: element.computed,
            start: location().start.offset,
            end: location().end.offset
          };
        });
      };
  var peg$f38 = function(callee) {
        return { type: "NewExpression", callee: callee, arguments: [], start: location().start.offset, end: location().end.offset };
      };
  var peg$f39 = function(callee, args) {
          return { type: "CallExpression", callee: callee, arguments: args, start: location().start.offset, end: location().end.offset };
        };
  var peg$f40 = function(head, args) {
            return { type: "CallExpression", arguments: args, start: location().start.offset, end: location().end.offset };
          };
  var peg$f41 = function(head, property) {
            return {
              type:     "MemberExpression",
              property: property,
              computed: true,
              start: location().start.offset,
              end: location().end.offset
            };
          };
  var peg$f42 = function(head, property) {
            return {
              type:     "MemberExpression",
              property: property,
              computed: false,
              start: location().start.offset,
              end: location().end.offset
            };
          };
  var peg$f43 = function(head, tail) {
        return buildTree(head, tail, function(result, element) {
          element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;

          // Fix the start position of all nodes (ORIGIN: https://github.com/duaraghav8/Solium/issues/104)
          // The MemberExpression node's start property doesnt cover the entire previous code
          // eg - "ab.cd()[10]" the node.start points to '[' instead of 'a'
          // Same issue with CallExpression

          element.start = location().start.offset;
          return element;
        });
      };
  var peg$f44 = function(args) {
        return optionalList(extractOptional(args, 0));
      };
  var peg$f45 = function(args) {
      return optionalList(extractOptional(args, 0));
    };
  var peg$f46 = function(head, tail) {
        return buildList(head, tail, 3);
      };
  var peg$f47 = function(name, value) {
        return {
          type: "NameValueAssignment",
          name: name,
          value: value,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f48 = function(literal, members, parts) {
      return {
        type: "Type",
        literal: literal.type == "Identifier" ? literal.name : literal,
        members: optionalList(members).map(function(m) {return m[1].name;}),
        array_parts: optionalList(parts).map(function(p) {return p[3] != null ? p[3].value : null}),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f49 = function(funcName, modifiers, returns, parts) {
        return {
          type: "Type",
          literal: "function",
          params: funcName.params,
          return_params: returns,
          array_parts: optionalList(parts).map(function(p) {return p[3] != null ? p[3].value : null}),
          modifiers: modifiers,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f50 = function(modifier) {
        if (Array.isArray(modifier)) {
          return {
            type: "VisibilitySpecifier",
            value: modifier[0],
            start: location().start.offset,
            end: location().end.offset
          };
        }

        return modifier;
      };
  var peg$f51 = function(token) {
        return {
          type: "StateMutabilitySpecifier",
          value: token[0],
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f52 = function(constant, visibility, override) {
      return {
        visibility: visibility? visibility[0]: null,
        isconstant: constant ? (constant[0] === "constant" ? true: false) : false,
        isimmutable: constant? (constant[0] === "immutable" ? true: false) : false,
        isoverride: override?  true: false
      }
     };
  var peg$f53 = function(constant, override, visibility) {
      return {
        visibility: visibility? visibility[0]: null,
        isconstant: constant ? (constant[0] === "constant" ? true: false) : false,
        isimmutable: constant? (constant[0] === "immutable" ? true: false) : false,
        isoverride: override?  true: false
      }
     };
  var peg$f54 = function(override, constant, visibility) {
      return {
        visibility: visibility? visibility[0]: null,
        isconstant: constant ? (constant[0] === "constant" ? true: false) : false,
        isimmutable: constant? (constant[0] === "immutable" ? true: false) : false,
        isoverride: override?  true: false
      }
     };
  var peg$f55 = function(override, visibility, constant) {
      return {
        visibility: visibility? visibility[0]: null,
        isconstant: constant ? (constant[0] === "constant" ? true: false) : false,
        isimmutable: constant? (constant[0] === "immutable" ? true: false) : false,
        isoverride: override?  true: false
      }
     };
  var peg$f56 = function(visibility, override, constant) {
      return {
         visibility: visibility? visibility[0]: null,
        isconstant: constant ? (constant[0] === "constant" ? true: false) : false,
        isimmutable: constant? (constant[0] === "immutable" ? true: false) : false,
        isoverride: override?  true: false
      }
     };
  var peg$f57 = function(visibility, constant, override) {
      return {
        visibility: visibility? visibility[0]: null,
        isconstant: constant ? (constant[0] === "constant" ? true: false) : false,
        isimmutable: constant? (constant[0] === "immutable" ? true: false) : false,
        isoverride: override?  true: false
      }
    };
  var peg$f58 = function(expression) {
      return expression;
    };
  var peg$f59 = function(type, specifiers, id, value) {
      return {
        type: "StateVariableDeclaration",
        name: id.name,
        literal: type,
        visibility: specifiers? specifiers.visibility : null,
        is_constant: specifiers? specifiers.isconstant : false,
        is_immutable: specifiers? specifiers.isimmutable : false,
        is_override: specifiers? specifiers.isoverride: false,
        value: value,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f60 = function(type, storage, id) {
      return {
        type: "DeclarativeExpression",
        name: id.name,
        literal: type, 
        storage_location: storage ? storage[0]: null,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f61 = function(from, to) {
      return {
       type: "MappingExpression",
       from: from,
       to: to,
       start: location().start.offset,
       end: location().end.offset
     }
    };
  var peg$f62 = function(argument, operator) {
        return {
          type:     "UpdateExpression",
          operator: operator,
          argument: argument,
          prefix:   false,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f63 = function(operator, argument) {
        var type = (operator === "++" || operator === "--")
          ? "UpdateExpression"
          : "UnaryExpression";

        return {
          type:     type,
          operator: operator,
          argument: argument,
          prefix:   true,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f64 = function(head, tail) { return buildBinaryExpression(head, tail); };
  var peg$f65 = function(test, consequent, alternate) {
        return {
          type:       "ConditionalExpression",
          test:       test,
          consequent: consequent,
          alternate:  alternate,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f66 = function(left, right) {
        return {
          type:     "AssignmentExpression",
          operator: "=",
          left:     left,
          right:    right,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f67 = function(left, operator, right) {
        return {
          type:     "AssignmentExpression",
          operator: operator,
          left:     left,
          right:    right,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f68 = function(head, tail) {
        if (tail.length < 1) {
          return head;
        }

        // Below is a hack to successfully parse "(, a, , b, c,,,)" so expressions array only contains a, b & c
        // Hack is all we require since we're moving to a new parse very soon anyway :)

        var expressions = buildList(head, tail, 3), finalExpr = [];

        for (var i = 0; i < expressions.length; i++) {
          if (expressions[i] !== null) { finalExpr.push(expressions[i]); }
        }

        return {
          type: "SequenceExpression",
          expressions: finalExpr,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f69 = function(head, tail) {
        return buildList(head, tail, 1);
      };
  var peg$f70 = function(body, tail) {
        return {
          type: "IncompleteStatement",
          body: text(),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f71 = function(body, tail) {
        return {
          type: "IncompleteStatement",
          body:  text(),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f72 = function(body) {
        return {
          type: "BlockStatement",
          body: optionalList(extractOptional(body, 0)),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f73 = function(head, tail) { return buildList(head, tail, 1); };
  var peg$f74 = function(declarations) {
        return {
          type:         "VariableDeclaration",
          declarations: declarations,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f75 = function(tuple) {
        return {
          type:         "VariableDeclarationTuple",
          declarations: tuple.declarations,
          init: tuple.init,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f76 = function(head, tail, init) {
        return {
          declarations: buildList(head, tail, 1),
          init: extractOptional(init, 1)
        }
      };
  var peg$f77 = function(id) {
        return {
          type: "VariableDeclarator",
          id: id.constructor === Array ? id [1] : id,
          init: null,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f78 = function(id, init) {
        return {
          type: "VariableDeclarator",
          id: id.constructor === Array ? id [1] : id,
          init: extractOptional(init, 1),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f79 = function(expression) { return expression; };
  var peg$f80 = function() { return { type: "EmptyStatement", start: location().start.offset, end: location().end.offset }; };
  var peg$f81 = function(expression) {
        return {
          type:       "ExpressionStatement",
          expression: expression,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f82 = function(tryExpression, tail, tryStatement, catchStatements) {
        return {
           type:  "TryStatement",
           tryExpression: tryExpression,
           tryStatement: tryStatement,
           catchStatements: catchStatements
        };
      };
  var peg$f83 = function(tryExpression, tail, tryExpressionReturns, tryStatement, catchStatements) {
          return {
           type:  "TryStatement",
           tryExpressionReturns: tryExpressionReturns,
           tryExpression: tryExpression,
           tryStatement: tryStatement,
           catchStatements: catchStatements
        };
      };
  var peg$f84 = function(param, body) {
        return {
          type: "CatchClause",
          param: param,
          body: body
        };
      };
  var peg$f85 = function(body) {
        return {
          type: "CatchClause",
          body: body
        };
      };
  var peg$f86 = function(test, consequent, alternate) {
        return {
          type:       "IfStatement",
          test:       test,
          consequent: consequent,
          alternate:  alternate,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f87 = function(test, consequent) {
        return {
          type:       "IfStatement",
          test:       test,
          consequent: consequent,
          alternate:  null,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f88 = function(start_version, end_version) {
      return {
        type: "PragmaStatement",
        start_version: start_version,
        end_version: end_version,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f89 = function(featureName) {
      return {
        type: "ExperimentalPragmaStatement",
        feature: featureName,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f90 = function(version) {
      return {
        type: "AbiCoderPragmaStatement",
        version: version,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f91 = function(from, alias) {
      return {
        type: "ImportStatement",
        from: from.value,
        symbols: [],
        alias: alias != null ? alias[2].name : null,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f92 = function(symbol, from) {
      return {
        type: "ImportStatement",
        from: from.value,
        symbols: [symbol],
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f93 = function(symbols, from) {
      return {
        type: "ImportStatement",
        from: from.value,
        symbols: symbols,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f94 = function(library, type) {
      return {
        type: "UsingStatement",
        library: library.name,
        for: type,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f95 = function(library) {
      return {
        type: "UsingStatement",
        library: library.name,
        for: "*",
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f96 = function(callexpr) {
      return {
        type: "EmitStatement",
        expression: callexpr,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f97 = function(callexpr) {
      return {
        type: "RevertStatement",
        expression: callexpr,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f98 = function(name, alias) {
      return {
        type: "Symbol",
        name: name.name,
        alias: alias != null ? alias[2].name : name.name,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f99 = function(name, alias) {
      return {
        type: "Symbol",
        name: "*",
        alias: alias[2].name,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f100 = function(body, test) { return { type: "DoWhileStatement", body: body, test: test, start: location().start.offset, end: location().end.offset }; };
  var peg$f101 = function(test, body) { return { type: "WhileStatement", test: test, body: body, start: location().start.offset, end: location().end.offset }; };
  var peg$f102 = function(init, test, update, body) {
        return {
          type:   "ForStatement",
          init:   extractOptional(init, 0),
          test:   extractOptional(test, 0),
          update: extractOptional(update, 0),
          body:   body,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f103 = function(declarations, test, update, body) {
        return {
          type:   "ForStatement",
          init:   {
            type:         "VariableDeclaration",
            declarations: declarations,
            start: location().start.offset,
            end: location().end.offset
          },
          test:   extractOptional(test, 0),
          update: extractOptional(update, 0),
          body:   body,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f104 = function(body) {
        return {
          type: "InlineAssemblyStatement",
          body:  body,
          start: location().start.offset,
          end: location().end.offset
        };
    };
  var peg$f105 = function() {
      return {
        type: "PlaceholderStatement",
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f106 = function() {
        return { type: "ContinueStatement", label: null, start: location().start.offset, end: location().end.offset };
      };
  var peg$f107 = function(label) {
        return { type: "ContinueStatement", label: label, start: location().start.offset, end: location().end.offset };
      };
  var peg$f108 = function() {
        return { type: "BreakStatement", label: null, start: location().start.offset, end: location().end.offset };
      };
  var peg$f109 = function(label) {
        return { type: "BreakStatement", label: label, start: location().start.offset, end: location().end.offset };
      };
  var peg$f110 = function() {
        return { type: "ReturnStatement", argument: null, start: location().start.offset, end: location().end.offset };
      };
  var peg$f111 = function(argument) {
        return { type: "ReturnStatement", argument: argument, start: location().start.offset, end: location().end.offset };
      };
  var peg$f112 = function() {
        return { type: "ThrowStatement", start: location().start.offset, end: location().end.offset };
      };
  var peg$f113 = function(abstract, id, is, body) {
      return {
        type: "ContractStatement",
        name: id.name,
        is: is != null ? is.names : [],
        body: optionalList (body),
        is_abstract: abstract != null,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f114 = function(id, is, body) {
      return {
        type: "InterfaceStatement",
        name: id.name,
        is: is != null ? is.names : [],
        body: optionalList (body),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f115 = function(id, is, body) {
      return {
        type: "LibraryStatement",
        name: id.name,
        is: is != null ? is.names : [],
        body: optionalList (body),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f116 = function(modifiers) {
      return {
        type: "IsStatement",
        names: modifiers,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f117 = function(fnname, isanonymous) {
      return {
        type: "ErrorDeclaration",
        name: fnname.name,
        params: fnname.params,
        is_anonymous: isanonymous != null,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f118 = function(fnname, isanonymous) {
      return {
        type: "EventDeclaration",
        name: fnname.name,
        params: fnname.params,
        is_anonymous: isanonymous != null,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f119 = function(fnname, names, body) {
        return {
          type: "ModifierDeclaration",
          name: fnname.name,
          params: fnname.params,
          modifiers: names,
          body: body,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f120 = function(fnname, args, returns, body) {
        return {
          type: "FunctionDeclaration",
          name: fnname.name,
          params: fnname.params,
          modifiers: args,
          returnParams: returns,
          body: body,
          is_abstract: false,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f121 = function(fnname, args, returns) {
        return {
          type: "FunctionDeclaration",
          name: fnname.name,
          params: fnname.params,
          modifiers: args,
          returnParams: returns,
          body: null,
          is_abstract: true,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f122 = function(fnname, args, body) {
        return {
          type: "ConstructorDeclaration",
          params: fnname.params,
          modifiers: args,
          body: body,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f123 = function(fnname, args, body) {
        return {
          type: "FallbackDeclaration",
          modifiers: args,
          body: body,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f124 = function(fnname, args, body) {
        return {
          type: "ReceiveDeclaration",
          modifiers: args,
          body: body,
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f125 = function(params) {
      return params != null ? params [2] : null;
    };
  var peg$f126 = function(returnParams) {
      if (returnParams == null) {
        return null;
      }

      return {
        type: "ReturnParams",
        params: returnParams,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f127 = function(id, params) {
      return {
        type: "FunctionName",
        name: id != null ? id.name : null,
        params: params != null ? params[2] : [],
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f128 = function(id, params) {
      return {
        type: "ModifierName",
        name: id != null ? id.name : null,
        params: params != null ? params[2] : [],
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f129 = function(id, params) {
      var p = [];

      if (params != null && params[3] != null) {
        p = params[3];
      }

      return {
        type: "ModifierArgument",
        name: id != null ? id.name : null,
        params: p,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f130 = function(alias, modifier) {
        if (alias.length > 0) {
          var mergedAlias = alias.reduce(function(result, item) {
            return result + item[0].name + item[1];
          }, "");

          modifier.name = mergedAlias + modifier.name;
          modifier.start = alias[0][0].start;
        }

        return modifier;
      };
  var peg$f131 = function(type, isindexed, isconstant, storage, id) {
      return {
        type: "InformalParameter",
        literal: type,
        id: id ? id.name : null,
        is_indexed: isindexed != null,
        is_constant: isconstant != null,
        storage_location: storage ? storage[0]: null,
        start: location().start.offset,
        end: location().end.offset
      };
    };
  var peg$f132 = function(body) {
        return {
          type: "BlockStatement",
          body: optionalList(body),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f133 = function(id, head, tail) {
      return {
        type: "EnumDeclaration",
        name: id.name,
        members: buildList(head, tail, 3).map(function(i) {return i.name;}),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f134 = function(id, body) {
      return {
        type: "StructDeclaration",
        name: id.name,
        body: body != null ? body.declarations : null,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f135 = function(head, tail) {
      return {
        type: "DeclarativeExpressionList",
        declarations: buildList(head, tail, 1),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f136 = function(body) {
        return {
          type: "Program",
          body: optionalList(body),
          start: location().start.offset,
          end: location().end.offset
        };
      };
  var peg$f137 = function(items) {
      return {
        type: "InlineAssemblyBlock",
        items: optionalList(extractList(items, 0)),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f138 = function(head, tail) {
      return buildList(head, tail, 3);
    };
  var peg$f139 = function(id, params, returns, body) {
      return {
        type: "AssemblyFunctionDefinition",
        name: id.name,
        params: params != null ? params : [],
        returnParams: returns != null ? returns[2] : [],
        body: body,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f140 = function(names, expression) {
      if (expression != null) {
        expression = expression[3];
      }

      return {
        type: "AssemblyLocalBinding",
        names: names,
        expression: expression,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f141 = function(names, expression) {
      return {
        type: "AssemblyAssignment",
        names: names,
        expression: expression,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f142 = function() {
      return {
        type: "Identifier",
        name: "return",
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f143 = function(name, head, tail) {
      return {
        type: "FunctionalAssemblyInstruction",
        name: name,
        arguments: buildList(head, tail, 2),
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f144 = function(name) {
      return {
        type: "AssemblyLabel",
        name: name,
        start: location().start.offset,
        end: location().end.offset
      }
    };
  var peg$f145 = function(test, body) {
      return {
          type: "AssemblyIf",
          test: test,
          body: body,
          start: location().start.offset,
          end: location().end.offset
      }
    };
  var peg$f146 = function(init, test, update, body) {
      return {
        type: "AssemblyFor",
        init: init,
        test: test,
        update: update,
        body: body,
        start: location().start.offset,
        end: location().end.offset
      };
    };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Start",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseProgram();
    s3 = peg$parse__();
    peg$savedPos = s0;
    s0 = peg$f0(s2);

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Start",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Start",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSourceCharacter() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SourceCharacter",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SourceCharacter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SourceCharacter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseWhiteSpace() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WhiteSpace",
      location: peg$computeLocation(startPos, startPos)
    });

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 11) {
        s0 = peg$c1;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 12) {
          s0 = peg$c2;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s0 = peg$c3;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 160) {
              s0 = peg$c4;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 65279) {
                s0 = peg$c5;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseZs();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WhiteSpace",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WhiteSpace",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLineTerminator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LineTerminator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LineTerminator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LineTerminator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLineTerminatorSequence() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LineTerminatorSequence",
      location: peg$computeLocation(startPos, startPos)
    });

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c7) {
        s0 = peg$c7;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c8;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c9;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c10;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LineTerminatorSequence",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LineTerminatorSequence",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseComment() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Comment",
      location: peg$computeLocation(startPos, startPos)
    });

    peg$silentFails++;
    s0 = peg$parseMultiLineComment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingleLineComment();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Comment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Comment",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMultiLineComment() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MultiLineComment",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s5 = peg$c12;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s5 = peg$c12;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s3 = peg$c12;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MultiLineComment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MultiLineComment",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMultiLineCommentNoLineTerminator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MultiLineCommentNoLineTerminator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s5 = peg$c12;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s5 === peg$FAILED) {
        s5 = peg$parseLineTerminator();
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s5 = peg$c12;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s3 = peg$c12;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MultiLineCommentNoLineTerminator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MultiLineCommentNoLineTerminator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSingleLineComment() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SingleLineComment",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseLineTerminator();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SingleLineComment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SingleLineComment",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Identifier",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReservedWord();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifierName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Identifier",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Identifier",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIdentifierName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IdentifierName",
      location: peg$computeLocation(startPos, startPos)
    });

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifierStart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseIdentifierPart();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseIdentifierPart();
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IdentifierName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IdentifierName",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIdentifierStart() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IdentifierStart",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseUnicodeLetter();
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 36) {
        s0 = peg$c14;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c15;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IdentifierStart",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IdentifierStart",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIdentifierPart() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IdentifierPart",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseIdentifierStart();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNd();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IdentifierPart",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IdentifierPart",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAddressPayable() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AddressPayable",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parsePayableToken();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f3();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AddressPayable",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AddressPayable",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUnicodeLetter() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnicodeLetter",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseLu();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLl();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLm();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLo();
            if (s0 === peg$FAILED) {
              s0 = peg$parseNl();
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnicodeLetter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnicodeLetter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUnicodeCombiningMark() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnicodeCombiningMark",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseMn();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMc();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnicodeCombiningMark",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnicodeCombiningMark",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReservedWord() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReservedWord",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseKeyword();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNullToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReservedWord",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReservedWord",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseKeyword() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Keyword",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseBreakToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseContinueToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseContractToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInterfaceToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDeleteToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDoToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parseElseToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseForToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseFunctionToken();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseHexToken();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseIfToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseImportToken();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseNewToken();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsePragmaToken();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseReturnToken();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseReturnsToken();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseThisToken();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseThrowToken();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseVarToken();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseWhileToken();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseTryToken();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseCatchToken();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseEmitToken();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Keyword",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Keyword",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLiteral() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Literal",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseBooleanLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDenominationLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumericLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseHexStringLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseVersionLiteral();
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Literal",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Literal",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBooleanLiteral() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BooleanLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseTrueToken();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFalseToken();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f5();
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BooleanLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BooleanLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNumericLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NumericLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexIntegerLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierStart();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDecimalDigit();
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDecimalLiteral();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierStart();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDecimalDigit();
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f6(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NumericLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NumericLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDenomination() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Denomination",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseWeiToken();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSzaboToken();
      if (s1 === peg$FAILED) {
        s1 = peg$parseFinneyToken();
        if (s1 === peg$FAILED) {
          s1 = peg$parseEtherToken();
          if (s1 === peg$FAILED) {
            s1 = peg$parseSecondsToken();
            if (s1 === peg$FAILED) {
              s1 = peg$parseMinutesToken();
              if (s1 === peg$FAILED) {
                s1 = peg$parseHoursToken();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseDaysToken();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseWeeksToken();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseYearsToken();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Denomination",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Denomination",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDenominationLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DenominationLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseNumericLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseDenomination();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DenominationLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DenominationLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDecimalLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DecimalLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseDecimalIntegerLiteral();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c17;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDecimalDigit();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDecimalDigit();
        }
        s4 = peg$parseExponentPart();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f9();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDecimalDigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExponentPart();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f9();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDecimalIntegerLiteral();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExponentPart();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f9();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DecimalLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DecimalLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDecimalIntegerLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DecimalIntegerLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c18;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNonZeroDigit();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDecimalDigit();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDecimalDigit();
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DecimalIntegerLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DecimalIntegerLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDecimalDigit() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DecimalDigit",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r1.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DecimalDigit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DecimalDigit",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNonZeroDigit() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NonZeroDigit",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NonZeroDigit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NonZeroDigit",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseExponentPart() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExponentPart",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseExponentIndicator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSignedInteger();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExponentPart",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExponentPart",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseExponentIndicator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExponentIndicator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c19) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExponentIndicator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExponentIndicator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSignedInteger() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SignedInteger",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseDecimalDigit();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDecimalDigit();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SignedInteger",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SignedInteger",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseHexIntegerLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "HexIntegerLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c20) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseHexDigit();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseHexDigit();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "HexIntegerLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "HexIntegerLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseHexDigit() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "HexDigit",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "HexDigit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "HexDigit",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStringLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StringLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleStringCharacter();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleStringCharacter();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleStringCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleStringCharacter();
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c22;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f11(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StringLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StringLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseHexStringLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "HexStringLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseHexToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStringLiteral();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "HexStringLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "HexStringLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDoubleStringCharacter() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DoubleStringCharacter",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c21;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSourceCharacter();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapeSequence();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLineContinuation();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DoubleStringCharacter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DoubleStringCharacter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSingleStringCharacter() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SingleStringCharacter",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c22;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSourceCharacter();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapeSequence();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLineContinuation();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SingleStringCharacter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SingleStringCharacter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLineContinuation() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LineContinuation",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLineTerminatorSequence();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LineContinuation",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LineContinuation",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEscapeSequence() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EscapeSequence",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseCharacterEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseDecimalDigit();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseHexEscapeSequence();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnicodeEscapeSequence();
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EscapeSequence",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EscapeSequence",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCharacterEscapeSequence() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CharacterEscapeSequence",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseSingleEscapeCharacter();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNonEscapeCharacter();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CharacterEscapeSequence",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CharacterEscapeSequence",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSingleEscapeCharacter() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SingleEscapeCharacter",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c21;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s0 = peg$c23;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 98) {
            s1 = peg$c24;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f17();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 102) {
              s1 = peg$c25;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f18();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 110) {
                s1 = peg$c26;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e38); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f19();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 114) {
                  s1 = peg$c27;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e39); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f20();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 116) {
                    s1 = peg$c28;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e40); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f21();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 118) {
                      s1 = peg$c29;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e41); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f22();
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SingleEscapeCharacter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SingleEscapeCharacter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNonEscapeCharacter() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NonEscapeCharacter",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseEscapeCharacter();
    if (s2 === peg$FAILED) {
      s2 = peg$parseLineTerminator();
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSourceCharacter();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NonEscapeCharacter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NonEscapeCharacter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEscapeCharacter() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EscapeCharacter",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseSingleEscapeCharacter();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDecimalDigit();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 120) {
          s0 = peg$c30;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 117) {
            s0 = peg$c31;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e43); }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EscapeCharacter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EscapeCharacter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseHexEscapeSequence() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "HexEscapeSequence",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 120) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseHexDigit();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseHexDigit();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "HexEscapeSequence",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "HexEscapeSequence",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUnicodeEscapeSequence() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnicodeEscapeSequence",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 117) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseHexDigit();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseHexDigit();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseHexDigit();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseHexDigit();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnicodeEscapeSequence",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnicodeEscapeSequence",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVersionLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VersionLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseRelationalOperator();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEqualityPragmaOperator();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBitwiseXOROperator();
        if (s1 === peg$FAILED) {
          s1 = peg$parseTilde();
        }
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 118) {
      s3 = peg$c29;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseDecimalIntegerLiteral();
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c17;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseDecimalIntegerLiteral();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s7 = peg$c17;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parseDecimalIntegerLiteral();
        if (s8 !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f24(s1, s4, s5, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VersionLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VersionLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLl() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Ll",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Ll",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Ll",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLm() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Lm",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Lm",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Lm",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLo() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Lo",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r7.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Lo",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Lo",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLt() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Lt",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r8.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Lt",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Lt",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLu() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Lu",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r9.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Lu",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Lu",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMc() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Mc",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Mc",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Mc",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMn() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Mn",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r11.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Mn",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Mn",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNd() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Nd",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r12.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Nd",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Nd",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNl() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Nl",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r13.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Nl",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Nl",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePc() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Pc",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r14.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Pc",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Pc",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseZs() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Zs",
      location: peg$computeLocation(startPos, startPos)
    });

    if (peg$r15.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Zs",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Zs",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEmitToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EmitToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EmitToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EmitToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseRevertToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RevertToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RevertToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RevertToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAbstractToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AbstractToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AbstractToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AbstractToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseExperimentalToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExperimentalToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExperimentalToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExperimentalToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseOverrideToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "OverrideToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "OverrideToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "OverrideToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAbiCoderToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AbiCoderToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AbiCoderToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AbiCoderToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseExternalToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExternalToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExternalToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExternalToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePureToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PureToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PureToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PureToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseViewToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ViewToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ViewToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ViewToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePayableToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PayableToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PayableToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PayableToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAnonymousToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AnonymousToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c42) {
      s1 = peg$c42;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AnonymousToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AnonymousToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAsToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AsToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AsToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AsToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBreakToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BreakToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BreakToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BreakToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCalldataToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CalldataToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CalldataToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CalldataToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseConstantToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConstantToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConstantToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConstantToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseImmutableToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ImmutableToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ImmutableToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ImmutableToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseContinueToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ContinueToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ContinueToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ContinueToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseContractToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ContractToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c49) {
      s1 = peg$c49;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ContractToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ContractToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseConstructorToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConstructorToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConstructorToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConstructorToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReceiveToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReceiveToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReceiveToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReceiveToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFallbackToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FallbackToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FallbackToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FallbackToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDaysToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DaysToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DaysToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DaysToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDeleteToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DeleteToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DeleteToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DeleteToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDoToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DoToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DoToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DoToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseElseToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ElseToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ElseToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ElseToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEnumToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EnumToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EnumToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EnumToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEtherToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EtherToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EtherToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EtherToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEventToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EventToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EventToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EventToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseErrorToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ErrorToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c60) {
      s1 = peg$c60;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ErrorToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ErrorToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFalseToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FalseToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FalseToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FalseToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFinneyToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FinneyToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FinneyToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FinneyToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseForToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ForToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ForToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ForToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFromToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FromToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FromToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FromToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseGetToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "GetToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "GetToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "GetToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseHexToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "HexToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "HexToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "HexToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseHoursToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "HoursToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "HoursToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "HoursToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIfToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IfToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IfToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IfToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseTryToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TryToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TryToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TryToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCatchToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CatchToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CatchToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CatchToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIsToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IsToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IsToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IsToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIndexedToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IndexedToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IndexedToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IndexedToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseImportToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ImportToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ImportToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ImportToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInterfaceToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InterfaceToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c75) {
      s1 = peg$c75;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InterfaceToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InterfaceToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInternalToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InternalToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InternalToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InternalToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLibraryToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LibraryToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c77) {
      s1 = peg$c77;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LibraryToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LibraryToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMappingToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MappingToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c78) {
      s1 = peg$c78;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MappingToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MappingToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMemoryToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MemoryToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MemoryToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MemoryToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMinutesToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MinutesToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MinutesToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MinutesToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNewToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NewToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NewToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NewToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNullToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NullToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NullToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NullToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePrivateToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PrivateToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c84) {
      s1 = peg$c84;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PrivateToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PrivateToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePragmaToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PragmaToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PragmaToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PragmaToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePublicToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PublicToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PublicToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PublicToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReturnToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturnToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c87) {
      s1 = peg$c87;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturnToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturnToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReturnsToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturnsToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturnsToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturnsToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSecondsToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SecondsToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SecondsToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SecondsToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSetToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SetToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c90) {
      s1 = peg$c90;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SetToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SetToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSolidityToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SolidityToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c91) {
      s1 = peg$c91;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SolidityToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SolidityToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStorageToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StorageToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StorageToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StorageToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStructToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StructToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c93) {
      s1 = peg$c93;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StructToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StructToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSuperToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SuperToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c94) {
      s1 = peg$c94;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SuperToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SuperToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSzaboToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SzaboToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c95) {
      s1 = peg$c95;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SzaboToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SzaboToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseThisToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ThisToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ThisToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ThisToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseThrowToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ThrowToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ThrowToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ThrowToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseTrueToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TrueToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c98) {
      s1 = peg$c98;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TrueToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TrueToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUsingToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UsingToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UsingToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UsingToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVarToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VarToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VarToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VarToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseWeeksToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WeeksToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c101) {
      s1 = peg$c101;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WeeksToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WeeksToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseWeiToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WeiToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WeiToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WeiToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseWhileToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "WhileToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c103) {
      s1 = peg$c103;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "WhileToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "WhileToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseYearsToken() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "YearsToken",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "YearsToken",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "YearsToken",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parse__() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "__",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = [];
    s1 = peg$parseWhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLineTerminatorSequence();
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "__",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "__",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parse_() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "_",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = [];
    s1 = peg$parseWhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseMultiLineCommentNoLineTerminator();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMultiLineCommentNoLineTerminator();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "_",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "_",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEOS() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EOS",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 59) {
      s2 = peg$c105;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EOS",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EOS",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEOF() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EOF",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EOF",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EOF",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseComma() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Comma",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c106;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Comma",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Comma",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePrimaryExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PrimaryExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseThisToken();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseArrayLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s1 = peg$c107;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e130); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              s3 = peg$parseExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c108;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e131); }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f26(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PrimaryExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PrimaryExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseArrayLiteral() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ArrayLiteral",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c109;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = peg$parseElision();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.charCodeAt(peg$currPos) === 93) {
        s4 = peg$c110;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e133); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c109;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e132); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseElementList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c110;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e133); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f28(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c109;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e132); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          s3 = peg$parseElementList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c106;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e129); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$currPos;
              s8 = peg$parseElision();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c110;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e133); }
              }
              if (s8 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f29(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ArrayLiteral",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ArrayLiteral",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseElementList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ElementList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseElision();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseAssignmentExpression();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s1;
      s1 = peg$f30(s2, s3);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$currPos;
        s8 = peg$parseElision();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s8 = [s8, s9];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseAssignmentExpression();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f31(s1, s7, s8);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$currPos;
          s8 = peg$parseElision();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parseAssignmentExpression();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f31(s1, s7, s8);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ElementList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ElementList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseElision() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Elision",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c106;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f33(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Elision",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Elision",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMemberExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MemberExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parsePrimaryExpression();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseNewToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parseType();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parseArguments();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f34(s4, s6);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 91) {
        s5 = peg$c109;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e132); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseExpression();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 93) {
            s9 = peg$c110;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e133); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f35(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c17;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseIdentifierName();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f36(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c109;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e132); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseExpression();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 93) {
              s9 = peg$c110;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e133); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f35(s1, s7);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseIdentifierName();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f36(s1, s7);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f37(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MemberExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MemberExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNewExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NewExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseMemberExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNewToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseNewExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f38(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NewExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NewExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCallExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CallExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseMemberExpression();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseArguments();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f39(s2, s4);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseArguments();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f40(s1, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c109;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e132); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseExpression();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 93) {
              s9 = peg$c110;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e133); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f41(s1, s7);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseIdentifierName();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f42(s1, s7);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseArguments();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f40(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 91) {
            s5 = peg$c109;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e132); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseExpression();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 93) {
                s9 = peg$c110;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e133); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s3;
                s3 = peg$f41(s1, s7);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$parseIdentifierName();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s3 = peg$f42(s1, s7);
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f43(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CallExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CallExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseArguments() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Arguments",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c107;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = peg$parseArgumentList();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.charCodeAt(peg$currPos) === 41) {
        s4 = peg$c108;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e131); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f44(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c107;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c111;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$currPos;
          s6 = peg$parseNameValueList();
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c106;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e129); }
            }
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s7 = peg$c112;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c108;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e131); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f44(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c111;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          s3 = peg$currPos;
          s4 = peg$parseNameValueList();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c106;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e129); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s5 = peg$c112;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f45(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Arguments",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Arguments",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseArgumentList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ArgumentList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseAssignmentExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseAssignmentExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseAssignmentExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ArgumentList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ArgumentList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNameValueList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NameValueList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseNameValueAssignment();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseNameValueAssignment();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseNameValueAssignment();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NameValueList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NameValueList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseNameValueAssignment() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "NameValueAssignment",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c113;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f47(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "NameValueAssignment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "NameValueAssignment",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLeftHandSideExpression() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LeftHandSideExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseDeclarativeExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNewExpression();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LeftHandSideExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LeftHandSideExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseType() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Type",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseMapping();
    if (s1 === peg$FAILED) {
      s1 = peg$parseAddressPayable();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIdentifier();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c17;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c17;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseIdentifier();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 91) {
        s6 = peg$c109;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e132); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = peg$parseExpression();
        s9 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 93) {
          s10 = peg$c110;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e133); }
        }
        if (s10 !== peg$FAILED) {
          s5 = [s5, s6, s7, s8, s9, s10];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 91) {
          s6 = peg$c109;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e132); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseExpression();
          s9 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 93) {
            s10 = peg$c110;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e133); }
          }
          if (s10 !== peg$FAILED) {
            s5 = [s5, s6, s7, s8, s9, s10];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f48(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFunctionToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseFunctionName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseFunctionTypeModifierList();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse__();
          s7 = peg$parseReturnsDeclarations();
          s8 = peg$parse__();
          s9 = [];
          s10 = peg$currPos;
          s11 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 91) {
            s12 = peg$c109;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e132); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse__();
            s14 = peg$parseExpression();
            s15 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 93) {
              s16 = peg$c110;
              peg$currPos++;
            } else {
              s16 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e133); }
            }
            if (s16 !== peg$FAILED) {
              s11 = [s11, s12, s13, s14, s15, s16];
              s10 = s11;
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$currPos;
            s11 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 91) {
              s12 = peg$c109;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e132); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse__();
              s14 = peg$parseExpression();
              s15 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 93) {
                s16 = peg$c110;
                peg$currPos++;
              } else {
                s16 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e133); }
              }
              if (s16 !== peg$FAILED) {
                s11 = [s11, s12, s13, s14, s15, s16];
                s10 = s11;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f49(s3, s5, s7, s9);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Type",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Type",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionTypeModifier() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionTypeModifier",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseInternalToken();
    if (s1 === peg$FAILED) {
      s1 = peg$parseExternalToken();
      if (s1 === peg$FAILED) {
        s1 = peg$parseStateMutabilitySpecifier();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionTypeModifier",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionTypeModifier",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStateMutabilitySpecifier() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StateMutabilitySpecifier",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseConstantToken();
    if (s1 === peg$FAILED) {
      s1 = peg$parsePureToken();
      if (s1 === peg$FAILED) {
        s1 = peg$parseViewToken();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePayableToken();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StateMutabilitySpecifier",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StateMutabilitySpecifier",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVisibilitySpecifier() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VisibilitySpecifier",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parsePublicToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePrivateToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInternalToken();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VisibilitySpecifier",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VisibilitySpecifier",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStorageLocationSpecifier() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StorageLocationSpecifier",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseStorageToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMemoryToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCalldataToken();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StorageLocationSpecifier",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StorageLocationSpecifier",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStateVariableSpecifiers() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StateVariableSpecifiers",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseConstantToken();
    if (s1 === peg$FAILED) {
      s1 = peg$parseImmutableToken();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseVisibilitySpecifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseOverrideToken();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f52(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseConstantToken();
      if (s1 === peg$FAILED) {
        s1 = peg$parseImmutableToken();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseOverrideToken();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse__();
        s5 = peg$parseVisibilitySpecifier();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f53(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOverrideToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          s3 = peg$parseConstantToken();
          if (s3 === peg$FAILED) {
            s3 = peg$parseImmutableToken();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            s5 = peg$parseVisibilitySpecifier();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f54(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseOverrideToken();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parseVisibilitySpecifier();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parse__();
            s5 = peg$parseConstantToken();
            if (s5 === peg$FAILED) {
              s5 = peg$parseImmutableToken();
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f55(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseVisibilitySpecifier();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              s3 = peg$parseOverrideToken();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parseConstantToken();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseImmutableToken();
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s6 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f56(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVisibilitySpecifier();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                s3 = peg$parseConstantToken();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseImmutableToken();
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parse__();
                s5 = peg$parseOverrideToken();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                s6 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f57(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StateVariableSpecifiers",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StateVariableSpecifiers",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStateVariableValue() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StateVariableValue",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c114;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseExpression();
      peg$savedPos = s0;
      s0 = peg$f58(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StateVariableValue",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StateVariableValue",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStateVariableDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StateVariableDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseStateVariableSpecifiers();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = peg$parseIdentifier();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseStateVariableValue();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parse__();
        s9 = peg$parseEOS();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f59(s1, s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StateVariableDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StateVariableDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDeclarativeExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DeclarativeExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseStorageLocationSpecifier();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = peg$parseIdentifier();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f60(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DeclarativeExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DeclarativeExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMapping() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Mapping",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseMappingToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c107;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseType();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (input.substr(peg$currPos, 2) === peg$c115) {
            s7 = peg$c115;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e138); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseType();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 41) {
                s11 = peg$c108;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e131); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f61(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Mapping",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Mapping",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePostfixExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PostfixExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSideExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePostfixOperator();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f62(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLeftHandSideExpression();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PostfixExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PostfixExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePostfixOperator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PostfixOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 2) === peg$c116) {
      s0 = peg$c116;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c117) {
        s0 = peg$c117;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e140); }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PostfixOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PostfixOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUnaryExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnaryExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parsePostfixExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnaryOperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseUnaryExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnaryExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnaryExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUnaryOperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UnaryOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseDeleteToken();
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c116) {
        s0 = peg$c116;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e139); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c117) {
          s0 = peg$c117;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e140); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s2 = peg$c118;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e141); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c114;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = undefined;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s2 = peg$c119;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e142); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 61) {
                s4 = peg$c114;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = undefined;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 126) {
                s0 = peg$c120;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e143); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 33) {
                  s0 = peg$c121;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e144); }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UnaryOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UnaryOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMultiplicativeExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MultiplicativeExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseUnaryExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseMultiplicativeOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseUnaryExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseMultiplicativeOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseUnaryExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MultiplicativeExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MultiplicativeExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMultiplicativeOperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MultiplicativeOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s2 = peg$c122;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s3 = peg$c122;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e145); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s5 = peg$c114;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c123;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e146); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c114;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c124;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e147); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c114;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MultiplicativeOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MultiplicativeOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAdditiveExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AdditiveExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseAdditiveOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseMultiplicativeExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseAdditiveOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseMultiplicativeExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AdditiveExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AdditiveExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAdditiveOperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AdditiveOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c118;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (peg$r16.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e148); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c119;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e142); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (peg$r17.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e149); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AdditiveOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AdditiveOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseShiftExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ShiftExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseShiftOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseAdditiveExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseShiftOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseAdditiveExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ShiftExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ShiftExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseShiftOperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ShiftOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c125) {
      s2 = peg$c125;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c114;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c126) {
        s2 = peg$c126;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e151); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c114;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c127) {
          s2 = peg$c127;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e152); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c114;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ShiftOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ShiftOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseRelationalExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RelationalExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseShiftExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseRelationalOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseShiftExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseRelationalOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseShiftExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RelationalExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RelationalExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseRelationalOperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RelationalOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 2) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c129) {
        s0 = peg$c129;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e154); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s2 = peg$c130;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e155); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 60) {
            s4 = peg$c130;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e155); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 62) {
            s2 = peg$c131;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e156); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c131;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e156); }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = undefined;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RelationalOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RelationalOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEqualityExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EqualityExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseRelationalExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseEqualityOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseRelationalExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseEqualityOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseRelationalExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EqualityExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EqualityExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEqualityOperator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EqualityOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 2) === peg$c132) {
      s0 = peg$c132;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c133) {
        s0 = peg$c133;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e158); }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EqualityOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EqualityOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEqualityPragmaOperator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EqualityPragmaOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c114;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EqualityPragmaOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EqualityPragmaOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseTilde() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Tilde",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.charCodeAt(peg$currPos) === 126) {
      s0 = peg$c120;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Tilde",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Tilde",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBitwiseANDExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BitwiseANDExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseEqualityExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseBitwiseANDOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseEqualityExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseBitwiseANDOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseEqualityExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BitwiseANDExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BitwiseANDExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBitwiseANDOperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BitwiseANDOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s2 = peg$c134;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (peg$r18.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e160); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BitwiseANDOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BitwiseANDOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBitwiseXORExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BitwiseXORExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseBitwiseANDExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseBitwiseXOROperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseBitwiseANDExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseBitwiseXOROperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseBitwiseANDExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BitwiseXORExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BitwiseXORExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBitwiseXOROperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BitwiseXOROperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s2 = peg$c135;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c114;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BitwiseXOROperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BitwiseXOROperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBitwiseORExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BitwiseORExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseBitwiseXORExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseBitwiseOROperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseBitwiseXORExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseBitwiseOROperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseBitwiseXORExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BitwiseORExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BitwiseORExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBitwiseOROperator() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BitwiseOROperator",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c136;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (peg$r19.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e163); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BitwiseOROperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BitwiseOROperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLogicalANDExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LogicalANDExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseBitwiseORExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseLogicalANDOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseBitwiseORExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseLogicalANDOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseBitwiseORExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LogicalANDExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LogicalANDExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLogicalANDOperator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LogicalANDOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 2) === peg$c137) {
      s0 = peg$c137;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LogicalANDOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LogicalANDOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLogicalORExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LogicalORExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseLogicalANDExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseLogicalOROperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseLogicalANDExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseLogicalOROperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseLogicalANDExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LogicalORExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LogicalORExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLogicalOROperator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LogicalOROperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 2) === peg$c138) {
      s0 = peg$c138;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LogicalOROperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LogicalOROperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseConditionalExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConditionalExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseLogicalORExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 63) {
        s3 = peg$c139;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e166); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s7 = peg$c113;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e136); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseAssignmentExpression();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f65(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalORExpression();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConditionalExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConditionalExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssignmentExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssignmentExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSideExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c114;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c114;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parseAssignmentExpression();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f66(s1, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLeftHandSideExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseAssignmentOperator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseAssignmentExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f67(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseConditionalExpression();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssignmentExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssignmentExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssignmentOperator() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssignmentOperator",
      location: peg$computeLocation(startPos, startPos)
    });

    if (input.substr(peg$currPos, 2) === peg$c140) {
      s0 = peg$c140;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c141) {
        s0 = peg$c141;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e168); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c142) {
          s0 = peg$c142;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e169); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c143) {
            s0 = peg$c143;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e170); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c144) {
              s0 = peg$c144;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e171); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c145) {
                s0 = peg$c145;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e172); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c146) {
                  s0 = peg$c146;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e173); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c147) {
                    s0 = peg$c147;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e174); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c148) {
                      s0 = peg$c148;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e175); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c149) {
                        s0 = peg$c149;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e176); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssignmentOperator",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssignmentOperator",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseExpression() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Expression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseAssignmentExpression();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 44) {
      s5 = peg$c106;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    if (s5 !== peg$FAILED) {
      s6 = peg$parse__();
      s7 = peg$parseAssignmentExpression();
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      s4 = [s4, s5, s6, s7];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseAssignmentExpression();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s4 = [s4, s5, s6, s7];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f68(s1, s2);

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Expression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Expression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStatements() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Statements",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseStatement();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseStatement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Statements",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Statements",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStatement() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Statement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseBlock();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVariableStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEmptyStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseExpressionStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePlaceholderStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIfStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parseTryStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIterationStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseInlineAssemblyStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseContinueStatement();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseBreakStatement();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseReturnStatement();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseThrowStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseUsingStatement();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseEmitStatement();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseRevertStatement();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseIncompleteBlock();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Statement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Statement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIncompleteBlock() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IncompleteBlock",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseTryStatement();
    if (s2 === peg$FAILED) {
      s2 = peg$parseBlock();
      if (s2 === peg$FAILED) {
        s2 = peg$parseVariableStatement();
        if (s2 === peg$FAILED) {
          s2 = peg$parseEmptyStatement();
          if (s2 === peg$FAILED) {
            s2 = peg$parseExpressionStatement();
            if (s2 === peg$FAILED) {
              s2 = peg$parsePlaceholderStatement();
              if (s2 === peg$FAILED) {
                s2 = peg$parseIfStatement();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseCatchStatement();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseIterationStatement();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseInlineAssemblyStatement();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseContinueStatement();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseBreakStatement();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseReturnStatement();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseThrowStatement();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseUsingStatement();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseEmitStatement();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$parseRevertStatement();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseEmitToken();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parsePrimaryExpression();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s8 = peg$c17;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s8 === peg$FAILED) {
            s8 = peg$currPos;
            s9 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
              s10 = peg$c114;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse__();
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s10 = peg$c114;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse__();
                s12 = peg$parseNewToken();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse__();
                  s9 = [s9, s10, s11, s12, s13];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parseIdentifier();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s8 = peg$c17;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s8 === peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s10 = peg$c114;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse__();
                s9 = [s9, s10, s11];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s10 = peg$c114;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e137); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse__();
                  s12 = peg$parseNewToken();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parse__();
                    s9 = [s9, s10, s11, s12, s13];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseIdentifier();
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s7 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f70(s3, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      s2 = peg$parseReturnToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parsePrimaryExpression();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s7 = peg$c17;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s7 === peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c114;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse__();
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s9 = peg$c114;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                s11 = peg$parseNewToken();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parse__();
                  s8 = [s8, s9, s10, s11, s12];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseIdentifier();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s7 = peg$c17;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s7 === peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s9 = peg$c114;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s9 = peg$c114;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e137); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  s11 = peg$parseNewToken();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse__();
                    s8 = [s8, s9, s10, s11, s12];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseIdentifier();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s6 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f71(s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$parsePrimaryExpression();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
              s7 = peg$c114;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s7 = peg$c114;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s9 = peg$parseNewToken();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  s6 = [s6, s7, s8, s9, s10];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseIdentifier();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s7 = peg$c114;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c114;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e137); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  s9 = peg$parseNewToken();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse__();
                    s6 = [s6, s7, s8, s9, s10];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIdentifier();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          s4 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f70(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IncompleteBlock",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IncompleteBlock",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBlock() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Block",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c111;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = peg$parseStatementList();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        s4 = peg$c112;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f72(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Block",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Block",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStatementList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StatementList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseStatement();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseStatement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f73(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StatementList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StatementList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVariableStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VariableStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseVarToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseVariableDeclarationList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseEOS();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f74(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVarToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseVariableDeclarationTuple();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOS();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f75(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VariableStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VariableStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVariableDeclarationTuple() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VariableDeclarationTuple",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c107;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseComma();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseComma();
      }
      s3 = peg$parse__();
      s4 = peg$parseVariableDeclarationNoInit();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = [];
        s8 = peg$parseComma();
        if (s8 !== peg$FAILED) {
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseComma();
          }
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseVariableDeclarationNoInit();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = [];
          s8 = peg$parseComma();
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseComma();
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseVariableDeclarationNoInit();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse__();
        s7 = [];
        s8 = peg$parseComma();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parseComma();
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c108;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$currPos;
          s10 = peg$parse__();
          s11 = peg$parseInitialiser();
          if (s11 !== peg$FAILED) {
            s10 = [s10, s11];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f76(s4, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VariableDeclarationTuple",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VariableDeclarationTuple",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVariableDeclarationNoInit() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VariableDeclarationNoInit",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VariableDeclarationNoInit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VariableDeclarationNoInit",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVariableDeclarationList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VariableDeclarationList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseVariableDeclaration();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseVariableDeclaration();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseVariableDeclaration();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VariableDeclarationList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VariableDeclarationList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseVariableDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "VariableDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c107;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c108;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      s4 = peg$parseInitialiser();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f78(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "VariableDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "VariableDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInitialiser() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Initialiser",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c114;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c114;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parseAssignmentExpression();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f79(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Initialiser",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Initialiser",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEmptyStatement() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EmptyStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c105;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f80();
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EmptyStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EmptyStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseExpressionStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ExpressionStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c111;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parseContractToken();
      if (s2 === peg$FAILED) {
        s2 = peg$parseInterfaceToken();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLibraryToken();
          if (s2 === peg$FAILED) {
            s2 = peg$parseStructToken();
            if (s2 === peg$FAILED) {
              s2 = peg$parseEnumToken();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      s3 = peg$parseEOS();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f81(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ExpressionStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ExpressionStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseTryStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "TryStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseTryToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseExpression();
      s4 = [];
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c17;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s6 === peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 61) {
          s8 = peg$c114;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 61) {
            s8 = peg$c114;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = peg$parseNewToken();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse__();
              s7 = [s7, s8, s9, s10, s11];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseIdentifier();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s6 = [s6, s7];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c17;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s6 === peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 61) {
            s8 = peg$c114;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
              s8 = peg$c114;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s10 = peg$parseNewToken();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse__();
                s7 = [s7, s8, s9, s10, s11];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseIdentifier();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse__();
      s6 = peg$parseStatement();
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s8 = [];
        s9 = peg$parseCatchStatements();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseCatchStatements();
        }
        peg$savedPos = s0;
        s0 = peg$f82(s3, s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTryToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseExpression();
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c17;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s6 === peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 61) {
            s8 = peg$c114;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e137); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
              s8 = peg$c114;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s10 = peg$parseNewToken();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse__();
                s7 = [s7, s8, s9, s10, s11];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseIdentifier();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c17;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s6 === peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
              s8 = peg$c114;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e137); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse__();
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 61) {
                s8 = peg$c114;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e137); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                s10 = peg$parseNewToken();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse__();
                  s7 = [s7, s8, s9, s10, s11];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseIdentifier();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse__();
        s6 = peg$parseReturnsDeclarations();
        s7 = peg$parse__();
        s8 = peg$parseStatement();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          s10 = [];
          s11 = peg$parseCatchStatements();
          while (s11 !== peg$FAILED) {
            s10.push(s11);
            s11 = peg$parseCatchStatements();
          }
          peg$savedPos = s0;
          s0 = peg$f83(s3, s4, s6, s8, s10);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "TryStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "TryStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCatchStatements() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CatchStatements",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseCatchStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseCatchStatement();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseCatchStatement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CatchStatements",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CatchStatements",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCatchStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CatchStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseCatchToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c107;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseInformalParameterList();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c108;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseBlock();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f84(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCatchToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseBlock();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f85(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCatchToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 5) === peg$c150) {
            s3 = peg$c150;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e177); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c107;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e130); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$parseInformalParameterList();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s9 = peg$c108;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e131); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  s11 = peg$parseBlock();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f84(s7, s11);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CatchStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CatchStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIfStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IfStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIfToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c107;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseExpression();
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s7 = peg$c108;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parseStatement();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$parseElseToken();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse__();
              s13 = peg$parseStatement();
              if (s13 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f86(s5, s9, s13);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIfToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c107;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e130); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseExpression();
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c108;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseStatement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f87(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IfStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IfStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePragmaStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PragmaStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parsePragmaToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseSolidityToken();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseVersionLiteral();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseVersionLiteral();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parseEOS();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f88(s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePragmaToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseExperimentalToken();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseIdentifier();
          if (s5 === peg$FAILED) {
            s5 = peg$parseStringLiteral();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f89(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePragmaToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          s3 = peg$parseAbiCoderToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            s5 = peg$parseIdentifier();
            if (s5 === peg$FAILED) {
              s5 = peg$parseStringLiteral();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEOS();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f90(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PragmaStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PragmaStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseImportStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ImportStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseImportToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseStringLiteral();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$currPos;
        s6 = peg$parseAsToken();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseIdentifier();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseEOS();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f91(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseImportToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseGlobalSymbol();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseFromToken();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseStringLiteral();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s9 = peg$parseEOS();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f92(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseImportToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c111;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e134); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            s5 = peg$parseSymbolList();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 125) {
                s7 = peg$c112;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e135); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s9 = peg$parseFromToken();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse__();
                  s11 = peg$parseStringLiteral();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse__();
                    s13 = peg$parseEOS();
                    if (s13 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f93(s5, s11);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ImportStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ImportStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseUsingStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "UsingStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseUsingToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseForToken();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseType();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseEOS();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f94(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUsingToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseForToken();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 42) {
              s7 = peg$c122;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e145); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s9 = peg$parseEOS();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f95(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "UsingStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "UsingStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEmitStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EmitStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseEmitToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseCallExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseEOS();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f96(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EmitStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EmitStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseRevertStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "RevertStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseRevertToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseCallExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseEOS();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f97(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "RevertStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "RevertStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSymbolList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SymbolList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseSymbol();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseSymbol();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseSymbol();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SymbolList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SymbolList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSymbol() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Symbol",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = peg$parseAsToken();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f98(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Symbol",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Symbol",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseGlobalSymbol() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "GlobalSymbol",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c122;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = peg$parseAsToken();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f99(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "GlobalSymbol",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "GlobalSymbol",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIterationStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IterationStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseDoToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseStatement();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseWhileToken();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c107;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e130); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseExpression();
            s10 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 41) {
              s11 = peg$c108;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e131); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parseEOS();
              if (s12 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f100(s3, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWhileToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c107;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e130); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseExpression();
          s6 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c108;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseStatement();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f101(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseForToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c107;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e130); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            s5 = peg$currPos;
            s6 = peg$parseExpression();
            s7 = peg$parse__();
            s6 = [s6, s7];
            s5 = s6;
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c105;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e128); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              s8 = peg$currPos;
              s9 = peg$parseExpression();
              s10 = peg$parse__();
              s9 = [s9, s10];
              s8 = s9;
              if (input.charCodeAt(peg$currPos) === 59) {
                s9 = peg$c105;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e128); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                s11 = peg$currPos;
                s12 = peg$parseExpression();
                s13 = peg$parse__();
                s12 = [s12, s13];
                s11 = s12;
                if (input.charCodeAt(peg$currPos) === 41) {
                  s12 = peg$c108;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e131); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse__();
                  s14 = peg$parseStatement();
                  if (s14 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f102(s5, s8, s11, s14);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseForToken();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c107;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e130); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              s5 = peg$parseVarToken();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseVariableDeclarationList();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s9 = peg$c105;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e128); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse__();
                    s11 = peg$currPos;
                    s12 = peg$parseExpression();
                    s13 = peg$parse__();
                    s12 = [s12, s13];
                    s11 = s12;
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s12 = peg$c105;
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e128); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parse__();
                      s14 = peg$currPos;
                      s15 = peg$parseExpression();
                      s16 = peg$parse__();
                      s15 = [s15, s16];
                      s14 = s15;
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s15 = peg$c108;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e131); }
                      }
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parse__();
                        s17 = peg$parseStatement();
                        if (s17 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f103(s7, s11, s14, s17);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IterationStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IterationStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInlineAssemblyStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InlineAssemblyStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c151) {
      s1 = peg$c151;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseInlineAssemblyBlock();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f104(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InlineAssemblyStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InlineAssemblyStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parsePlaceholderStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "PlaceholderStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      s4 = peg$parseEOS();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f105();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "PlaceholderStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "PlaceholderStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseContinueStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ContinueStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseContinueToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f106();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseContinueToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOS();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f107(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ContinueStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ContinueStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBreakStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "BreakStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseBreakToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f108();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBreakToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOS();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f109(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "BreakStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "BreakStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReturnStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturnStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseReturnToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f110();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseReturnToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseExpression();
        s4 = peg$parseEOS();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f111(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturnStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturnStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseThrowStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ThrowStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseThrowToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f112();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ThrowStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ThrowStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseContractStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ContractStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseAbstractToken();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse__();
    s3 = peg$parseContractToken();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      s5 = peg$parseIdentifier();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseIsStatement();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s9 = peg$c111;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse__();
          s11 = peg$parseSourceElements();
          if (s11 === peg$FAILED) {
            s11 = null;
          }
          s12 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s13 = peg$c112;
            peg$currPos++;
          } else {
            s13 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s13 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f113(s1, s5, s7, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ContractStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ContractStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInterfaceStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InterfaceStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseInterfaceToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseIsStatement();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s7 = peg$c111;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parseSourceElements();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s11 = peg$c112;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f114(s3, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InterfaceStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InterfaceStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseLibraryStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "LibraryStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseLibraryToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseIsStatement();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s7 = peg$c111;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parseSourceElements();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s11 = peg$c112;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f115(s3, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "LibraryStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "LibraryStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseIsStatement() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "IsStatement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIsToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseCommaSeparatedModifierNameList();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f116(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "IsStatement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "IsStatement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseErrorDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ErrorDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseErrorToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseFunctionName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAnonymousToken();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseEOS();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f117(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ErrorDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ErrorDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEventDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EventDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseEventToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseFunctionName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAnonymousToken();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseEOS();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f118(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EventDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EventDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseModifierToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseModifierName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseModifierNameList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseFunctionBody();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseFunctionToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseFunctionName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseModifierArgumentList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseReturnsDeclarations();
        s8 = peg$parse__();
        s9 = peg$parseFunctionBody();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f120(s3, s5, s7, s9);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFunctionToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parseFunctionName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseModifierArgumentList();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parse__();
          s7 = peg$parseReturnsDeclarations();
          s8 = peg$parse__();
          s9 = peg$parseEOS();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f121(s3, s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseConstructorDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ConstructorDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseConstructorToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseFunctionName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseModifierArgumentList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseFunctionBody();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f122(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ConstructorDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ConstructorDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFallbackDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FallbackDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseFallbackToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseFunctionName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseModifierArgumentList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseFunctionBody();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f123(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FallbackDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FallbackDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReceiveDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReceiveDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseReceiveToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseFunctionName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseModifierArgumentList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = peg$parseFunctionBody();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f124(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReceiveDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReceiveDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReturnsDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturnsDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseReturnsToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c107;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseInformalParameterList();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c108;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s8 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7, s8];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f125(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturnsDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturnsDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReturnsDeclarations() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturnsDeclarations",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseReturnsDeclaration();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f126(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturnsDeclarations",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturnsDeclarations",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionName",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse__();
    s3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s4 = peg$c107;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parse__();
      s6 = peg$parseInformalParameterList();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 41) {
        s8 = peg$c108;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e131); }
      }
      if (s8 !== peg$FAILED) {
        s4 = [s4, s5, s6, s7, s8];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f127(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionName",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierName() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierName",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c107;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseInformalParameterList();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c108;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s8 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7, s8];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f128(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierName",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierName",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierArgument() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierArgument",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c107;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseArgumentList();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c108;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s8 !== peg$FAILED) {
          s3 = [s3, s4, s5, s6, s7, s8];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f129(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierArgument",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierArgument",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionNameList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseFunctionName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseFunctionName();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseFunctionName();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionNameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionNameList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierNameList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseModifierName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseModifierName();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseModifierName();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierNameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierNameList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierArgumentList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierArgumentList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseModifierArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseModifierArgument();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseModifierArgument();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierArgumentList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierArgumentList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionTypeModifierList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionTypeModifierList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseFunctionTypeModifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseFunctionTypeModifier();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseFunctionTypeModifier();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionTypeModifierList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionTypeModifierList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseModifierNameWithAlias() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ModifierNameWithAlias",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseIdentifier();
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c17;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c17;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parseModifierName();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f130(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ModifierNameWithAlias",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ModifierNameWithAlias",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseCommaSeparatedModifierNameList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "CommaSeparatedModifierNameList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseModifierNameWithAlias();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseModifierNameWithAlias();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseModifierNameWithAlias();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "CommaSeparatedModifierNameList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "CommaSeparatedModifierNameList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInformalParameter() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InformalParameter",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIndexedToken();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = peg$parseConstantToken();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse__();
      s7 = peg$parseStorageLocationSpecifier();
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      s8 = peg$parse__();
      s9 = peg$parseIdentifier();
      if (s9 === peg$FAILED) {
        s9 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f131(s1, s3, s5, s7, s9);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InformalParameter",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InformalParameter",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInformalParameterList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InformalParameterList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseInformalParameter();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLiteral();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseInformalParameter();
        if (s7 === peg$FAILED) {
          s7 = peg$parseLiteral();
        }
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseInformalParameter();
          if (s7 === peg$FAILED) {
            s7 = peg$parseLiteral();
          }
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InformalParameterList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InformalParameterList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionBody",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c111;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseStatements();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c112;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f132(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionBody",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionBody",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseEnumDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "EnumDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseEnumToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c111;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$currPos;
            s10 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
              s11 = peg$c106;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e129); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse__();
              s13 = peg$parseIdentifier();
              if (s13 !== peg$FAILED) {
                s10 = [s10, s11, s12, s13];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$currPos;
              s10 = peg$parse__();
              if (input.charCodeAt(peg$currPos) === 44) {
                s11 = peg$c106;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e129); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse__();
                s13 = peg$parseIdentifier();
                if (s13 !== peg$FAILED) {
                  s10 = [s10, s11, s12, s13];
                  s9 = s10;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            }
            s9 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 125) {
              s10 = peg$c112;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e135); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f133(s3, s7, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "EnumDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "EnumDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseStructDeclaration() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "StructDeclaration",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseStructToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c111;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e134); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseDeclarativeExpressionList();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 125) {
            s9 = peg$c112;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f134(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "StructDeclaration",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "StructDeclaration",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseDeclarativeExpressionList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "DeclarativeExpressionList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseDeclarativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseEOS();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse__();
        s7 = peg$parseDeclarativeExpression();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parseEOS();
          if (s9 !== peg$FAILED) {
            s6 = [s6, s7, s8, s9];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse__();
          s7 = peg$parseDeclarativeExpression();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseEOS();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f135(s1, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "DeclarativeExpressionList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "DeclarativeExpressionList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseProgram() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Program",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseSourceUnits();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f136(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Program",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Program",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSourceUnits() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SourceUnits",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseSourceUnit();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseSourceUnit();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseSourceUnit();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SourceUnits",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SourceUnits",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSourceUnit() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SourceUnit",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parsePragmaStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseImportStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseContractStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInterfaceStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLibraryStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseStructDeclaration();
              if (s0 === peg$FAILED) {
                s0 = peg$parseErrorDeclaration();
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SourceUnit",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SourceUnit",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSourceElements() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SourceElements",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseSourceElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseSourceElement();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseSourceElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SourceElements",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SourceElements",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSourceElement() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "SourceElement",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseStateVariableDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEnumDeclaration();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEventDeclaration();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStructDeclaration();
          if (s0 === peg$FAILED) {
            s0 = peg$parseErrorDeclaration();
            if (s0 === peg$FAILED) {
              s0 = peg$parseModifierDeclaration();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFunctionDeclaration();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseConstructorDeclaration();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseFallbackDeclaration();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseReceiveDeclaration();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseUsingStatement();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "SourceElement",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "SourceElement",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseInlineAssemblyBlock() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "InlineAssemblyBlock",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c111;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseAssemblyItem();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseAssemblyItem();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c112;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f137(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "InlineAssemblyBlock",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "InlineAssemblyBlock",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyItem() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyItem",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseFunctionalAssemblyInstruction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseInlineAssemblyBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAssemblyFunctionDefinition();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAssemblyLocalBinding();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAssemblyAssignment();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAssemblyLabel();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAssemblyIf();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAssemblyFor();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseNumericLiteral();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseStringLiteral();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseHexStringLiteral();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseIdentifier();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyItem",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyItem",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyExpression() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyExpression",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseFunctionalAssemblyInstruction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseElementaryAssemblyOperation();
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyExpression",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyExpression",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseElementaryAssemblyOperation() {
    var startPos = peg$currPos;
    var s0;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ElementaryAssemblyOperation",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$parseNumericLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseStringLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifier();
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ElementaryAssemblyOperation",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ElementaryAssemblyOperation",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyIdentifierList() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyIdentifierList",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c106;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseIdentifier();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c106;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f138(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyIdentifierList",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyIdentifierList",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyFunctionDefinition() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyFunctionDefinition",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseFunctionToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c107;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e130); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseAssemblyIdentifierList();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c108;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c152) {
              s12 = peg$c152;
              peg$currPos += 2;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e179); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse__();
              s14 = peg$parseAssemblyIdentifierList();
              if (s14 !== peg$FAILED) {
                s15 = peg$parse__();
                s12 = [s12, s13, s14, s15];
                s11 = s12;
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parseInlineAssemblyBlock();
            if (s12 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f139(s3, s7, s11, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyFunctionDefinition",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyFunctionDefinition",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyLocalBinding() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyLocalBinding",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c153) {
      s1 = peg$c153;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseAssemblyIdentifierList();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c154) {
          s6 = peg$c154;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e181); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          s8 = peg$parseAssemblyExpression();
          if (s8 !== peg$FAILED) {
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f140(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyLocalBinding",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyLocalBinding",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyAssignment() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyAssignment",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseAssemblyIdentifierList();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s3 = peg$c154;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAssemblyExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f141(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyAssignment",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyAssignment",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseReturnOpCode() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "ReturnOpCode",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c87) {
      s1 = peg$c87;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f142();
    }
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "ReturnOpCode",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "ReturnOpCode",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseFunctionalAssemblyInstruction() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "FunctionalAssemblyInstruction",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 === peg$FAILED) {
      s1 = peg$parseReturnOpCode();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c107;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e130); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAssemblyItem();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        s7 = [];
        s8 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s9 = peg$c106;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse__();
          s11 = peg$parseAssemblyItem();
          if (s11 !== peg$FAILED) {
            s9 = [s9, s10, s11];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c106;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e129); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse__();
            s11 = peg$parseAssemblyItem();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        }
        s8 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s9 = peg$c108;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e131); }
        }
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f143(s1, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "FunctionalAssemblyInstruction",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "FunctionalAssemblyInstruction",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyLabel() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyLabel",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c113;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f144(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyLabel",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyLabel",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyIf() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyIf",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseIfToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseAssemblyExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseInlineAssemblyBlock();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f145(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyIf",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyIf",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAssemblyFor() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AssemblyFor",
      location: peg$computeLocation(startPos, startPos)
    });

    s0 = peg$currPos;
    s1 = peg$parseForToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseInlineAssemblyBlock();
      if (s3 === peg$FAILED) {
        s3 = peg$parseFunctionalAssemblyInstruction();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseFunctionalAssemblyInstruction();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseInlineAssemblyBlock();
          if (s7 === peg$FAILED) {
            s7 = peg$parseFunctionalAssemblyInstruction();
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            s9 = peg$parseInlineAssemblyBlock();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f146(s3, s5, s7, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AssemblyFor",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AssemblyFor",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }


    var TYPES_TO_PROPERTY_NAMES = {
      CallExpression:   "callee",
      MemberExpression: "object"
    };

    String.prototype.replaceAll = function(search, replacement) {
      var target = this;
      return target.split(search).join(replacement);
    };

    function filledArray(count, value) {
      var result = new Array(count), i;

      for (i = 0; i < count; i++) {
        result[i] = value;
      }

      return result;
    }

    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

    function extractList(list, index) {
      var result = new Array(list.length), i;

      for (i = 0; i < list.length; i++) {
        result[i] = list[i][index];
      }

      return result;
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }

    function buildTree(head, tail, builder) {
      var result = head, i;

      for (i = 0; i < tail.length; i++) {
        result = builder(result, tail[i]);
      }

      return result;
    }

    function buildBinaryExpression(head, tail) {
      return buildTree(head, tail, function(result, element) {
        return {
          type:     "BinaryExpression",
          operator: element[1],
          left:     result,
          right:    element[3],
          start: result.start,
          end: element[3].end
        };
      });
    }

    function buildLogicalExpression(head, tail) {
      return buildTree(head, tail, function(result, element) {
        return {
          type:     "LogicalExpression",
          operator: element[1],
          left:     result,
          right:    element[3],
          start: location().start.offset,
          end: location().end.offset
        };
      });
    }

    function optionalList(value) {
      return value !== null ? value : [];
    }

    function normalizeVersionLiteral(item) {
      if (item.constructor.name === 'Array') {
        item [1] = item [1].join ('');
        item = item.join ('');
      }

      return item;
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  DefaultTracer: peg$DefaultTracer,
  parse: peg$parse
};
